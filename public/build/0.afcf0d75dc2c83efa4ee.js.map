{"version":3,"file":"0.afcf0d75dc2c83efa4ee.js","sources":["webpack:///./public/app/features/all.js","webpack:///./public/app/features/dashboard/impression_store.ts","webpack:///./public/app/features/panel/all.js","webpack:///./public/app/features/panel/panel_menu.js","webpack:///./public/app/features/panel/panel_directive.ts","webpack:///./public/app/features/panel/solo_panel_ctrl.js","webpack:///./public/app/features/panel/panel_editor_tab.ts","webpack:///./public/app/features/panel/query_editor_row.ts","webpack:///./public/app/features/panel/metrics_ds_selector.ts","webpack:///./public/app/features/panellinks/module.js","webpack:///./public/app/features/panellinks/linkSrv.js","webpack:///./public/app/features/annotations/annotations_srv.ts","webpack:///./public/app/features/templating/templateSrv.js","webpack:///./public/app/features/templating/editorCtrl.js","webpack:///./public/app/features/templating/templateValuesSrv.js","webpack:///./public/app/features/dashboard/all.js","webpack:///./public/app/features/dashboard/keybindings.js","webpack:///./public/app/features/dashboard/dashboardCtrl.js","webpack:///./public/app/features/dashboard/dashnav/dashnav.ts","webpack:///./public/app/features/dashboard/submenu/submenu.ts","webpack:///./public/app/features/dashboard/saveDashboardAsCtrl.js","webpack:///./public/app/features/dashboard/rowCtrl.js","webpack:///./public/app/features/dashboard/shareModalCtrl.js","webpack:///./public/app/features/dashboard/shareSnapshotCtrl.js","webpack:///./public/app/features/dashboard/dashboardSrv.js","webpack:///./public/app/features/dashboard/dashboardLoaderSrv.js","webpack:///./public/app/features/dashboard/viewStateSrv.js","webpack:///./public/app/features/dashboard/timeSrv.js","webpack:///./public/app/features/dashboard/unsavedChangesSrv.js","webpack:///./public/app/features/dashboard/timepicker/timepicker.ts","webpack:///./public/app/features/dashboard/timepicker/input_date.ts","webpack:///./public/app/features/dashboard/graphiteImportCtrl.js","webpack:///./public/app/features/dashboard/dynamicDashboardSrv.js","webpack:///./public/app/features/dashboard/importCtrl.js","webpack:///./public/app/features/playlist/all.js","webpack:///./public/app/features/playlist/playlists_ctrl.ts","webpack:///./public/app/features/playlist/playlist_search.ts","webpack:///./public/app/features/playlist/playlist_srv.ts","webpack:///./public/app/features/playlist/playlist_routes.js","webpack:///./public/app/features/snapshot/all.ts","webpack:///./public/app/features/snapshot/snapshot_ctrl.ts","webpack:///./public/app/features/dashlinks/module.js","webpack:///./public/app/features/decompose/all.js","webpack:///./public/app/features/decompose/DecomposeMetricCtrl.js","webpack:///./public/app/features/panelinfo/panelInfoEditCtrl.js","webpack:///./public/app/features/systemoverview/systemoverviewCtrl.ts","webpack:///./public/app/features/styleguide/styleguide.ts","webpack:///./public/app/features/rca/all.ts","webpack:///./public/app/features/rca/rootCauseAnalysisCtrl.ts","webpack:///./public/app/features/topn/all.ts","webpack:///./public/app/features/topn/topnCtrl.ts"],"sourcesContent":["define([\n  './panellinks/module',\n  './dashlinks/module',\n  './annotations/annotations_srv',\n  './templating/templateSrv',\n  './dashboard/all',\n  './playlist/all',\n  './snapshot/all',\n  './panel/all',\n  './decompose/all',\n  './panelinfo/panelInfoEditCtrl',\n  './systemoverview/systemoverviewCtrl',\n  './styleguide/styleguide',\n  './rca/all',\n  './topn/all',\n], function () {});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./public/app/features/all.js\n// module id = 1171\n// module chunks = 0","///<reference path=\"../../headers/common.d.ts\" />\n\nimport store from 'app/core/store';\nimport _ from 'lodash';\nimport config from 'app/core/config';\n\nexport class ImpressionsStore {\n  constructor() {}\n\n  addDashboardImpression(dashboardId) {\n    var impressionsKey = this.impressionKey(config);\n    var impressions = [];\n    if (store.exists(impressionsKey)) {\n      impressions = JSON.parse(store.get(impressionsKey));\n      if (!_.isArray(impressions)) {\n        impressions = [];\n      }\n    }\n\n    impressions = impressions.filter((imp) => {\n      return dashboardId !== imp;\n    });\n\n    impressions.unshift(dashboardId);\n\n    if (impressions.length > 50) {\n      impressions.pop();\n    }\n    store.set(impressionsKey, JSON.stringify(impressions));\n  }\n\n  getDashboardOpened() {\n    var impressions = store.get(this.impressionKey(config)) || \"[]\";\n\n    impressions = JSON.parse(impressions);\n\n    impressions = _.filter(impressions, el => {\n      return _.isNumber(el);\n    });\n\n    return impressions;\n  }\n\n  impressionKey(config) {\n    return \"dashboard_impressions-\" + config.bootData.user.orgId;\n  }\n}\n\nvar impressions = new ImpressionsStore();\n\nexport {\n  impressions\n};\n\n\n\n// WEBPACK FOOTER //\n// node_modules/tslint-loader??ref--0!./public/app/features/dashboard/impression_store.ts","define([\n  './panel_menu',\n  './panel_directive',\n  './solo_panel_ctrl',\n  './query_ctrl',\n  './panel_editor_tab',\n  './query_editor_row',\n  './metrics_ds_selector',\n], function () {});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./public/app/features/panel/all.js\n// module id = 1173\n// module chunks = 0","define([\n  'angular',\n  'jquery',\n  'lodash',\n  'tether',\n],\nfunction (angular, $, _, Tether) {\n  'use strict';\n\n  angular\n    .module('grafana.directives')\n    .directive('panelMenu', function($compile, linkSrv) {\n      var linkTemplate =\n          '<span class=\"panel-title drag-handle pointer\">' +\n            '<span class=\"panel-title-text drag-handle\">{{ctrl.panel.title | interpolateTemplateVars:this}}</span>' +\n            '<span class=\"panel-links-btn\"><i class=\"fa fa-external-link\"></i></span>' +\n            '<span class=\"panel-time-info\" ng-show=\"ctrl.timeInfo\"><i class=\"fa fa-clock-o\"></i> {{ctrl.timeInfo}}</span>' +\n          '</span>';\n\n      function createExternalLinkMenu(ctrl) {\n        var template = '<div class=\"panel-menu small\">';\n        template += '<div class=\"panel-menu-row\">';\n\n        if (ctrl.panel.links) {\n          _.each(ctrl.panel.links, function(link) {\n            var info = linkSrv.getPanelLinkAnchorInfo(link, ctrl.panel.scopedVars);\n            template += '<a class=\"panel-menu-link\" href=\"' + info.href + '\" target=\"' + info.target + '\">' + info.title + '</a>';\n          });\n        }\n        return template;\n      }\n\n      function createMenuTemplate(ctrl) {\n        // debugger\n        var template = '<div class=\"panel-right-menu drag-handle\" ng-show=\"!ctrl.loading\" ng-class=\"{panelError: ctrl.error}\">';\n        _.each(ctrl.getMenu(), function (item) {\n          if (item.role === 'Editor' && !ctrl.dashboard.meta.canEdit) {\n            return;\n          }\n          template += '<span class=\"';\n          var className = 'panel-right-menu-item';\n          if (item.hover) {\n            className += ' ' + item.hover;\n          }\n          template += className + '\"';\n          template += ' ng-click=\"' + item.click + '\" bs-tooltip=\"' + \"'\" + item.text + \"'\" + '\" data-container=\"body\">';\n          template += '<i class=\"fa ' + item.icon + '\"></i>';\n          template += '</span>';\n        });\n\n        if (ctrl.checkMenu('list')) {\n          template += '<div class=\"dropdown pull-right panel-right-menu-item\">';\n          template += '<a class=\"pointer\" ng-click=\"hideTooltip($event)\" data-placement=\"bottom\" data-toggle=\"dropdown\"><i class=\"fa fa-bars\"></i></a>';\n          template += '<ul class=\"dropdown-menu\">';\n          _.each(ctrl.getExtendedMenu(), function (item) {\n            if (item.role === 'Editor' && !ctrl.dashboard.meta.canEdit) {\n              return;\n            }\n            template += '<li><a class=\"pointer\"';\n            if (item.click) { template += ' ng-click=\"'+ item.click +'\"'; }\n            template += '>' + item.text + '</a></li>';\n          });\n          template += '</ul>';\n          template += '</div>';\n        }\n\n        if (ctrl.panel.downsamples) {\n          template += '<div class=\"dropdown pull-right panel-right-menu-item\">';\n          template += '<a class=\"pointer\" ng-click=\"hideTooltip($event)\" data-placement=\"bottom\" data-toggle=\"dropdown\"><i class=\"fa fa-arrow-circle-o-down\"></i>{{ctrl.panel.downsample}}</a>';\n          template += '<ul class=\"dropdown-menu\">';\n          _.each(ctrl.getDownsamplesMenu(), function (item) {\n            template += '<li><a class=\"pointer\"';\n            if (item.click) { template += ' ng-click=\"'+ item.click +'\"'; }\n            template += '>' + item.text + '</a></li>';\n          });\n          template += '</ul>';\n          template += '</div>';\n        }\n        template += '</div>';\n        return template;\n      }\n\n      function getExtendedMenu(ctrl) {\n        return ctrl.getExtendedMenu();\n      }\n\n      return {\n        restrict: 'A',\n        link: function($scope, elem) {\n          var $link = $(linkTemplate);\n          var $panelLinksBtn = $link.find(\".panel-links-btn\");\n          var $panelContainer = elem.parents(\".panel-container\");\n          var menuScope = null;\n          var ctrl = $scope.ctrl;\n          var timeout = null;\n          var $menu = null;\n          var teather;\n\n          elem.append($link);\n\n          $scope.$watchCollection('ctrl.panel.links', function(newValue) {\n            var showIcon = (newValue ? newValue.length > 0 : false) && ctrl.panel.title !== '';\n            $panelLinksBtn.toggle(showIcon);\n          });\n\n          function dismiss(time, force) {\n            clearTimeout(timeout);\n            timeout = null;\n\n            if (time) {\n              timeout = setTimeout(dismiss, time);\n              return;\n            }\n\n            // if hovering or draging pospone close\n            if (force !== true) {\n              if ($menu.is(':hover') || $scope.ctrl.dashboard.$$panelDragging) {\n                dismiss(2200);\n                return;\n              }\n            }\n\n            if (menuScope) {\n              teather.destroy();\n              $menu.unbind();\n              $menu.remove();\n              menuScope.$destroy();\n              menuScope = null;\n              $menu = null;\n              $panelContainer.removeClass('panel-highlight');\n            }\n          }\n\n          elem.append(createMenuTemplate(ctrl));\n          $compile(elem.contents())($scope);\n        }\n      };\n    });\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./public/app/features/panel/panel_menu.js\n// module id = 1174\n// module chunks = 0","///<reference path=\"../../headers/common.d.ts\" />\n\nimport angular from 'angular';\nimport $ from 'jquery';\n\nvar module = angular.module('grafana.directives');\n\nvar panelTemplate = `\n  <div class=\"panel-container\" ng-class=\"{'panel-transparent': ctrl.panel.transparent}\">\n    <div class=\"panel-header\">\n      <span class=\"panel-error small pointer\" ng-if=\"ctrl.error\" ng-click=\"ctrl.openInspector()\">\n        <span data-placement=\"top\" bs-tooltip=\"ctrl.error\" data-container=\"body\">\n          <i class=\"fa fa-exclamation-circle\"></i>\n        </span>\n      </span>\n\n      <span class=\"panel-loading\" ng-show=\"ctrl.loading\">\n        <i class=\"fa fa-spinner fa-spin\"></i>\n      </span>\n      <div class=\"panel-title-container drag-handle\" panel-menu></div>\n    </div>\n\n    <div class=\"panel-content\">\n      <ng-transclude></ng-transclude>\n    </div>\n    <panel-resizer></panel-resizer>\n    <div class=\"help-info\" ng-class=\"{true:'active'}[helpShow]\" ng-if=\"helpInfo.info\" ng-mouseleave=\"isShowInfo($event)\">\n      <div>\n        <h2>{{helpInfo.title}}</h2>\n        <div ng-bind-html=\"helpInfo.context\"></div>\n      </div>\n    </div>\n  </div>\n\n  <div class=\"panel-full-edit\" ng-if=\"ctrl.editMode\">\n    <div class=\"tabbed-view tabbed-view--panel-edit\">\n      <div class=\"tabbed-view-header\">\n        <h2 class=\"tabbed-view-title\">\n          {{ctrl.pluginName}}\n        </h2>\n\n        <ul class=\"gf-tabs\">\n          <li class=\"gf-tabs-item\" ng-repeat=\"tab in ::ctrl.editorTabs\">\n            <a class=\"gf-tabs-link\" ng-click=\"ctrl.editorTabIndex = $index\" ng-class=\"{active: ctrl.editorTabIndex === $index}\">\n              {{::tab.title}}\n            </a>\n          </li>\n        </ul>\n\n        <button class=\"tabbed-view-close-btn\" ng-click=\"ctrl.exitFullscreen();\">\n          <i class=\"fa fa-remove\"></i>\n        </button>\n      </div>\n\n      <div class=\"tabbed-view-body\">\n        <div ng-repeat=\"tab in ctrl.editorTabs\" ng-if=\"ctrl.editorTabIndex === $index\">\n          <panel-editor-tab editor-tab=\"tab\" ctrl=\"ctrl\" index=\"$index\"></panel-editor-tab>\n        </div>\n      </div>\n    </div>\n  </div>\n`;\n\nmodule.directive('grafanaPanel', function() {\n  return {\n    restrict: 'E',\n    template: panelTemplate,\n    transclude: true,\n    scope: { ctrl: \"=\" },\n    link: function(scope, elem) {\n      var panelContainer = elem.find('.panel-container');\n      var ctrl = scope.ctrl;\n      scope.$watchGroup(['ctrl.fullscreen', 'ctrl.containerHeight'], function() {\n        panelContainer.css({minHeight: ctrl.containerHeight});\n        elem.toggleClass('panel-fullscreen', ctrl.fullscreen ? true : false);\n      });\n    }\n  };\n});\n\nmodule.directive('panelResizer', function($rootScope) {\n  return {\n    restrict: 'E',\n    template: '<span class=\"resize-panel-handle\"></span>',\n    link: function(scope, elem) {\n      var resizing = false;\n      var lastPanel;\n      var ctrl = scope.ctrl;\n      var handleOffset;\n      var originalHeight;\n      var originalWidth;\n      var maxWidth;\n\n      function dragStartHandler(e) {\n        e.preventDefault();\n        resizing = true;\n\n        handleOffset = $(e.target).offset();\n        originalHeight = parseInt(ctrl.row.height);\n        originalWidth = ctrl.panel.span;\n        maxWidth = $(document).width();\n\n        lastPanel = ctrl.row.panels[ctrl.row.panels.length - 1];\n\n        $('body').on('mousemove', moveHandler);\n        $('body').on('mouseup', dragEndHandler);\n      }\n\n      function moveHandler(e) {\n        ctrl.row.height = originalHeight + (e.pageY - handleOffset.top);\n        ctrl.panel.span = originalWidth + (((e.pageX - handleOffset.left) / maxWidth) * 12);\n        ctrl.panel.span = Math.min(Math.max(ctrl.panel.span, 1), 12);\n\n        var rowSpan = ctrl.dashboard.rowSpan(ctrl.row);\n\n        // auto adjust other panels\n        if (Math.floor(rowSpan) < 14) {\n          // last panel should not push row down\n          if (lastPanel === ctrl.panel && rowSpan > 12) {\n            lastPanel.span -= rowSpan - 12;\n          } else if (lastPanel !== ctrl.panel) {\n            // reduce width of last panel so total in row is 12\n            lastPanel.span = lastPanel.span - (rowSpan - 12);\n            lastPanel.span = Math.min(Math.max(lastPanel.span, 1), 12);\n          }\n        }\n\n        scope.$apply(function() {\n          ctrl.render();\n        });\n      }\n\n      function dragEndHandler() {\n        // if close to 12\n        var rowSpan = ctrl.dashboard.rowSpan(ctrl.row);\n        if (rowSpan < 12 && rowSpan > 11) {\n          lastPanel.span +=  12 - rowSpan;\n        }\n\n        scope.$apply(function() {\n          $rootScope.$broadcast('render');\n        });\n\n        $('body').off('mousemove', moveHandler);\n        $('body').off('mouseup', dragEndHandler);\n      }\n\n      elem.on('mousedown', dragStartHandler);\n\n      scope.$on(\"$destroy\", function() {\n        elem.off('mousedown', dragStartHandler);\n      });\n    }\n  };\n});\n\n\n\n\n\n// WEBPACK FOOTER //\n// node_modules/tslint-loader??ref--0!./public/app/features/panel/panel_directive.ts","define([\n  'angular',\n  'jquery',\n],\nfunction (angular, $) {\n  \"use strict\";\n\n  var module = angular.module('grafana.routes');\n\n  module.controller('SoloPanelCtrl', function($scope, $routeParams, $location, dashboardLoaderSrv, contextSrv) {\n\n    var panelId;\n\n    $scope.init = function() {\n      contextSrv.sidemenu = false;\n\n      var params = $location.search();\n      panelId = parseInt(params.panelId);\n\n      dashboardLoaderSrv.loadDashboard($routeParams.type, $routeParams.slug).then(function(result) {\n        $scope.initDashboard(result, $scope);\n      });\n\n      $scope.onAppEvent(\"dashboard-loaded\", $scope.initPanelScope);\n    };\n\n    $scope.initPanelScope = function() {\n      $scope.row = {\n        height: $(window).height() + 'px',\n      };\n\n      $scope.test = \"Hej\";\n      $scope.$index = 0;\n      $scope.panel = $scope.dashboard.getPanelById(panelId);\n\n      if (!$scope.panel) {\n        $scope.appEvent('alert-error', ['Panel not found', '']);\n        return;\n      }\n\n      $scope.panel.span = 12;\n    };\n\n    $scope.init();\n  });\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./public/app/features/panel/solo_panel_ctrl.js\n// module id = 1176\n// module chunks = 0","///<reference path=\"../../headers/common.d.ts\" />\n\nimport angular from 'angular';\nimport config from 'app/core/config';\n\nvar directiveModule = angular.module('grafana.directives');\n\n/** @ngInject */\nfunction panelEditorTab(dynamicDirectiveSrv) {\n  return dynamicDirectiveSrv.create({\n    scope: {\n      ctrl: \"=\",\n      editorTab: \"=\",\n      index: \"=\",\n    },\n    directive: scope => {\n      var pluginId = scope.ctrl.pluginId;\n      var tabIndex = scope.index;\n\n      return Promise.resolve({\n        name: `panel-editor-tab-${pluginId}${tabIndex}`,\n        fn: scope.editorTab.directiveFn,\n      });\n    }\n  });\n}\n\ndirectiveModule.directive('panelEditorTab', panelEditorTab);\n\n\n\n// WEBPACK FOOTER //\n// node_modules/tslint-loader??ref--0!./public/app/features/panel/panel_editor_tab.ts","///<reference path=\"../../headers/common.d.ts\" />\n\nimport angular from 'angular';\nimport _ from 'lodash';\n\nvar module = angular.module('grafana.directives');\n\nexport class QueryRowCtrl {\n  collapsedText: string;\n  canCollapse: boolean;\n  getCollapsedText: any;\n  target: any;\n  queryCtrl: any;\n  panelCtrl: any;\n  panel: any;\n  collapsed: any;\n\n  constructor() {\n    this.panelCtrl = this.queryCtrl.panelCtrl;\n    this.target = this.queryCtrl.target;\n    this.panel = this.panelCtrl.panel;\n\n    if (!this.target.refId) {\n      this.target.refId = this.getNextQueryLetter();\n    }\n\n    this.toggleCollapse(true);\n    if (this.target.isNew) {\n      delete this.target.isNew;\n      this.toggleCollapse(false);\n    }\n  }\n\n  toggleHideQuery() {\n    this.target.hide = !this.target.hide;\n    this.panelCtrl.refresh();\n  }\n\n  getNextQueryLetter() {\n    var letters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n\n    return _.find(letters, refId => {\n      return _.every(this.panel.targets, function(other) {\n        return other.refId !== refId;\n      });\n    });\n  }\n\n  toggleCollapse(init) {\n    if (!this.canCollapse) {\n      return;\n    }\n\n    if (!this.panelCtrl.__collapsedQueryCache) {\n      this.panelCtrl.__collapsedQueryCache = {};\n    }\n\n    if (init) {\n      this.collapsed = this.panelCtrl.__collapsedQueryCache[this.target.refId] !== false;\n    } else {\n      this.collapsed = !this.collapsed;\n      this.panelCtrl.__collapsedQueryCache[this.target.refId] = this.collapsed;\n    }\n\n    try {\n      this.collapsedText = this.queryCtrl.getCollapsedText();\n    } catch (e) {\n      var err = e.message || e.toString();\n      this.collapsedText = 'Error: ' + err;\n    }\n  }\n\n  toggleEditorMode() {\n    if (this.canCollapse && this.collapsed) {\n      this.collapsed = false;\n    }\n\n    this.queryCtrl.toggleEditorMode();\n  }\n\n  removeQuery() {\n    if (this.panelCtrl.__collapsedQueryCache) {\n      delete this.panelCtrl.__collapsedQueryCache[this.target.refId];\n    }\n\n    this.panel.targets = _.without(this.panel.targets, this.target);\n    this.panelCtrl.refresh();\n  }\n\n  duplicateQuery() {\n    var clone = angular.copy(this.target);\n    clone.refId = this.getNextQueryLetter();\n    this.panel.targets.push(clone);\n  }\n\n  moveQuery(direction) {\n    var index = _.indexOf(this.panel.targets, this.target);\n    _.move(this.panel.targets, index, index + direction);\n  }\n}\n\n/** @ngInject **/\nfunction queryEditorRowDirective() {\n  return {\n    restrict: 'E',\n    controller: QueryRowCtrl,\n    bindToController: true,\n    controllerAs: \"ctrl\",\n    templateUrl: 'public/app/features/panel/partials/query_editor_row.html',\n    transclude: true,\n    scope: {\n      queryCtrl: \"=\",\n      canCollapse: \"=\",\n      hasTextEditMode: \"=\",\n    },\n  };\n}\n\nmodule.directive('queryEditorRow', queryEditorRowDirective);\n\n\n\n// WEBPACK FOOTER //\n// node_modules/tslint-loader??ref--0!./public/app/features/panel/query_editor_row.ts","///<reference path=\"../../headers/common.d.ts\" />\n\nimport angular from 'angular';\nimport _ from 'lodash';\n\nvar module = angular.module('grafana.directives');\n\nvar template = `\n<div class=\"gf-form-group\">\n  <div class=\"gf-form-inline\">\n    <div class=\"gf-form\">\n      <label class=\"gf-form-label\">\n        <i class=\"fa fa-database\"></i>\n      </label>\n      <label class=\"gf-form-label\">\n        数据源\n      </label>\n\n      <metric-segment segment=\"ctrl.dsSegment\" style-mode=\"select\"\n                      get-options=\"ctrl.getOptions()\"\n                      on-change=\"ctrl.datasourceChanged()\"></metric-segment>\n    </div>\n\n    <div class=\"gf-form gf-form--offset-1\">\n      <button class=\"btn btn-inverse gf-form-btn\" ng-click=\"ctrl.addDataQuery()\" ng-hide=\"ctrl.current.meta.mixed\">\n        <i class=\"fa fa-plus\"></i>&nbsp;\n        查询\n      </button>\n\n      <div class=\"dropdown\" ng-if=\"ctrl.current.meta.mixed\">\n        <button class=\"btn btn-inverse dropdown-toggle gf-form-btn\" data-toggle=\"dropdown\">\n          Add Query&nbsp;<span class=\"fa fa-caret-down\"></span>\n        </button>\n\n        <ul class=\"dropdown-menu\" role=\"menu\">\n          <li ng-repeat=\"datasource in ctrl.datasources\" role=\"menuitem\" ng-hide=\"datasource.meta.builtIn\">\n            <a ng-click=\"ctrl.addDataQuery(datasource);\">{{datasource.name}}</a>\n          </li>\n        </ul>\n      </div>\n    </div>\n  </div>\n</div>\n`;\n\n\nexport class MetricsDsSelectorCtrl {\n  dsSegment: any;\n  dsName: string;\n  panelCtrl: any;\n  datasources: any[];\n  current: any;\n\n  /** @ngInject */\n  constructor(private uiSegmentSrv, datasourceSrv) {\n    this.datasources = datasourceSrv.getMetricSources();\n\n    var dsValue = this.panelCtrl.panel.datasource || null;\n\n    for (let ds of this.datasources) {\n      if (ds.value === dsValue) {\n        this.current = ds;\n      }\n    }\n\n    if (!this.current) {\n      this.current = {name: dsValue + ' not found', value: null};\n    }\n\n    this.dsSegment = uiSegmentSrv.newSegment(this.current.name);\n  }\n\n  getOptions() {\n    return Promise.resolve(this.datasources.map(value => {\n      return this.uiSegmentSrv.newSegment(value.name);\n    }));\n  }\n\n  datasourceChanged() {\n    var ds = _.findWhere(this.datasources, {name: this.dsSegment.value});\n    if (ds) {\n      this.current = ds;\n      this.panelCtrl.setDatasource(ds);\n    }\n  }\n\n  addDataQuery(datasource) {\n    var target: any = {isNew: true};\n\n    if (datasource) {\n      target.datasource = datasource.name;\n    }\n\n    this.panelCtrl.panel.targets.push(target);\n  }\n}\n\nmodule.directive('metricsDsSelector', function() {\n  return {\n    restrict: 'E',\n    template: template,\n    controller: MetricsDsSelectorCtrl,\n    bindToController: true,\n    controllerAs: 'ctrl',\n    transclude: true,\n    scope: {\n      panelCtrl: \"=\"\n    }\n  };\n});\n\n\n\n// WEBPACK FOOTER //\n// node_modules/tslint-loader??ref--0!./public/app/features/panel/metrics_ds_selector.ts","define([\n  'angular',\n  'lodash',\n  './linkSrv',\n],\nfunction (angular, _) {\n  'use strict';\n\n  angular\n    .module('grafana.directives')\n    .directive('panelLinksEditor', function() {\n      return {\n        scope: {\n          panel: \"=\"\n        },\n        restrict: 'E',\n        controller: 'PanelLinksEditorCtrl',\n        templateUrl: 'public/app/features/panellinks/module.html',\n        link: function() {\n        }\n      };\n    }).controller('PanelLinksEditorCtrl', function($scope, backendSrv) {\n\n      $scope.panel.links = $scope.panel.links || [];\n\n      $scope.addLink = function() {\n        $scope.panel.links.push({\n          type: 'dashboard',\n        });\n      };\n\n      $scope.searchDashboards = function(queryStr, callback) {\n        backendSrv.search({query: queryStr}).then(function(hits) {\n          var dashboards = _.map(hits, function(dash) {\n            return dash.title;\n          });\n\n          callback(dashboards);\n        });\n      };\n\n      $scope.dashboardChanged = function(link) {\n        backendSrv.search({query: link.dashboard}).then(function(hits) {\n          var dashboard = _.findWhere(hits, {title: link.dashboard});\n          if (dashboard) {\n            link.dashUri = dashboard.uri;\n            link.title = dashboard.title;\n          }\n        });\n      };\n\n      $scope.deleteLink = function(link) {\n        $scope.panel.links = _.without($scope.panel.links, link);\n      };\n    });\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./public/app/features/panellinks/module.js\n// module id = 1180\n// module chunks = 0","define([\n  'angular',\n  'lodash',\n  'app/core/utils/kbn',\n],\nfunction (angular, _, kbn) {\n  'use strict';\n\n  kbn = kbn.default;\n\n  angular\n    .module('grafana.services')\n    .service('linkSrv', function(templateSrv, timeSrv) {\n\n      this.getLinkUrl = function(link) {\n        var url = templateSrv.replace(link.url || '');\n        var params = {};\n\n        if (link.keepTime) {\n          var range = timeSrv.timeRangeForUrl();\n          params['from'] = range.from;\n          params['to'] = range.to;\n        }\n\n        if (link.includeVars) {\n          templateSrv.fillVariableValuesForUrl(params);\n        }\n\n        return this.addParamsToUrl(url, params);\n      };\n\n      this.addParamsToUrl = function(url, params) {\n        var paramsArray = [];\n        _.each(params, function(value, key) {\n          if (value === null) { return; }\n          if (value === true) {\n            paramsArray.push(key);\n          }\n          else if (_.isArray(value)) {\n            _.each(value, function(instance) {\n              paramsArray.push(key + '=' + encodeURIComponent(instance));\n            });\n          }\n          else {\n            paramsArray.push(key + '=' + encodeURIComponent(value));\n          }\n        });\n\n        if (paramsArray.length === 0) {\n          return url;\n        }\n\n        return this.appendToQueryString(url, paramsArray.join('&'));\n      };\n\n      this.appendToQueryString = function(url, stringToAppend) {\n        if (!_.isUndefined(stringToAppend) && stringToAppend !== null && stringToAppend !== '') {\n          var pos = url.indexOf('?');\n          if (pos !== -1) {\n            if (url.length - pos > 1) {\n              url += '&';\n            }\n          } else {\n            url += '?';\n          }\n          url += stringToAppend;\n        }\n        return url;\n      };\n\n      this.getAnchorInfo = function(link) {\n        var info = {};\n        info.href = this.getLinkUrl(link);\n        info.title = templateSrv.replace(link.title || '');\n        return info;\n      };\n\n      this.getPanelLinkAnchorInfo = function(link, scopedVars) {\n        var info = {};\n        if (link.type === 'absolute') {\n          info.target = link.targetBlank ? '_blank' : '_self';\n          info.href = templateSrv.replace(link.url || '', scopedVars);\n          info.title = templateSrv.replace(link.title || '', scopedVars);\n        }\n        else if (link.dashUri) {\n          info.href = 'dashboard/' + link.dashUri + '?';\n          info.title = templateSrv.replace(link.title || '', scopedVars);\n          info.target = link.targetBlank ? '_blank' : '';\n        }\n        else {\n          info.title = templateSrv.replace(link.title || '', scopedVars);\n          var slug = kbn.slugifyForUrl(link.dashboard || '');\n          info.href = 'dashboard/db/' + slug + '?';\n        }\n\n        var params = {};\n\n        if (link.keepTime) {\n          var range = timeSrv.timeRangeForUrl();\n          params['from'] = range.from;\n          params['to'] = range.to;\n        }\n\n        if (link.includeVars) {\n          templateSrv.fillVariableValuesForUrl(params, scopedVars);\n        }\n\n        info.href = this.addParamsToUrl(info.href, params);\n\n        if (link.params) {\n          info.href = this.appendToQueryString(info.href, templateSrv.replace(link.params, scopedVars));\n        }\n\n        return info;\n      };\n\n    });\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./public/app/features/panellinks/linkSrv.js\n// module id = 1181\n// module chunks = 0","///<reference path=\"../../headers/common.d.ts\" />\n\nimport './editor_ctrl';\n\nimport angular from 'angular';\nimport _ from 'lodash';\nimport $ from 'jquery';\nimport coreModule from 'app/core/core_module';\n\nexport class AnnotationsSrv {\n  list: any = [];\n  globalAnnotationsPromise: any;\n  // alertStatesPromise: any;\n\n  /** @ngInject */\n  constructor(private $rootScope,\n              private $q,\n              private datasourceSrv,\n              private backendSrv,\n              private timeSrv) {\n    $rootScope.onAppEvent('refresh', this.clearCache.bind(this), $rootScope);\n    $rootScope.onAppEvent('dashboard-initialized', this.clearCache.bind(this), $rootScope);\n  }\n\n  clearCache() {\n    this.globalAnnotationsPromise = null;\n    // this.alertStatesPromise = null;\n  }\n\n  getAnnotations(options) {\n    return this.$q.all([\n      this.getGlobalAnnotations(options),\n      this.getPanelAnnotations(options),\n      // this.getAlertStates(options)\n    ]).then(results => {\n\n      // combine the annotations and flatten results\n      var annotations = _.flattenDeep([results[0], results[1]]);\n\n      // look for alert state for this panel\n      // var alertState = _.find(results[2], {panelId: options.panel.id});\n      return {\n        annotations: annotations,\n        // alertState: alertState,\n      };\n\n    }).catch(err => {\n      this.$rootScope.appEvent('alert-error', ['Annotations failed', (err.message || err.statusText || err)]);\n    });\n  }\n\n  getPanelAnnotations(options) {\n    var panel = options.panel;\n    var dashboard = options.dashboard;\n\n    if (panel && panel.alert) {\n      return this.backendSrv.get('/api/annotations', {\n        from: options.range.from.valueOf(),\n        to: options.range.to.valueOf(),\n        limit: 100,\n        panelId: panel.id,\n        dashboardId: dashboard.id,\n      }).then(results => {\n        return this.translateQueryResult({iconColor: '#AA0000', name: 'panel-alert'}, results);\n      });\n    }\n\n    return this.$q.when([]);\n  }\n\n  // getAlertStates(options) {\n  //   if (!options.dashboard.id) {\n  //     return this.$q.when([]);\n  //   }\n\n  //   // ignore if no alerts\n  //   if (options.panel && !options.panel.alert) {\n  //     return this.$q.when([]);\n  //   }\n\n  //   if (options.range.raw.to !== 'now') {\n  //     return this.$q.when([]);\n  //   }\n\n  //   if (this.alertStatesPromise) {\n  //     return this.alertStatesPromise;\n  //   }\n\n  //   this.alertStatesPromise = this.backendSrv.get('/api/alerts/states-for-dashboard', {dashboardId: options.dashboard.id});\n  //   return this.alertStatesPromise;\n  // }\n\n  getGlobalAnnotations(options) {\n    var dashboard = options.dashboard;\n\n    if (dashboard.annotations.list.length === 0) {\n      if (!_.isNull(dashboard.manualAnnotation)) {\n         return this.$q.when(dashboard.manualAnnotation);\n      }\n      return this.$q.when([]);\n    }\n\n    if (this.globalAnnotationsPromise) {\n      return this.globalAnnotationsPromise;\n    }\n\n    var annotations = _.filter(dashboard.annotations.list, {enable: true});\n    var range = this.timeSrv.timeRange();\n\n    this.globalAnnotationsPromise = this.$q.all(_.map(annotations, annotation => {\n      if (annotation.snapshotData) {\n        return this.translateQueryResult(annotation, annotation.snapshotData);\n      }\n\n      return this.datasourceSrv.get(annotation.datasource).then(datasource => {\n        // issue query against data source\n        return datasource.annotationQuery({range: range, rangeRaw: range.raw, annotation: annotation});\n      })\n      .then(results => {\n        // store response in annotation object if this is a snapshot call\n        if (dashboard.snapshot) {\n          annotation.snapshotData = angular.copy(results);\n        }\n        // translate result\n        return this.translateQueryResult(annotation, results);\n      });\n    }));\n\n    return this.globalAnnotationsPromise;\n  }\n\n  translateQueryResult(annotation, results) {\n    for (var item of results) {\n      item.source = annotation;\n      item.min = item.time;\n      item.max = item.time;\n      item.scope = 1;\n      item.eventType = annotation.name;\n    }\n    return results;\n  }\n}\n\ncoreModule.service('annotationsSrv', AnnotationsSrv);\n\n\n\n// WEBPACK FOOTER //\n// node_modules/tslint-loader??ref--0!./public/app/features/annotations/annotations_srv.ts","define([\n  'angular',\n  'lodash',\n  './editorCtrl',\n  './templateValuesSrv',\n],\nfunction (angular, _) {\n  'use strict';\n\n  var module = angular.module('grafana.services');\n\n  module.service('templateSrv', function() {\n    var self = this;\n\n    this._regex = /\\$(\\w+)|\\[\\[([\\s\\S]+?)\\]\\]/g;\n    this._index = {};\n    this._texts = {};\n    this._grafanaVariables = {};\n\n    this.init = function(variables) {\n      this.variables = variables;\n      this.updateTemplateData();\n    };\n\n    this.updateTemplateData = function() {\n      this._index = {};\n\n      for (var i = 0; i < this.variables.length; i++) {\n        var variable = this.variables[i];\n        if (!variable.current || !variable.current.isNone && !variable.current.value) {\n          continue;\n        }\n        this._index[variable.name] = variable;\n      }\n    };\n\n    function regexEscape(value) {\n      return value.replace(/[\\\\^$*+?.()|[\\]{}\\/]/g, '\\\\$&');\n    }\n\n    function luceneEscape(value) {\n      return value.replace(/([\\!\\*\\+\\-\\=<>\\s\\&\\|\\(\\)\\[\\]\\{\\}\\^\\~\\?\\:\\\\/\"])/g, \"\\\\$1\");\n    }\n\n    this.formatValue = function(value, format, variable) {\n      // for some scopedVars there is no variable\n      variable = variable || {};\n\n      if (typeof format === 'function') {\n        return format(value, variable, this.formatValue);\n      }\n\n      switch(format) {\n        case \"regex\": {\n          if (typeof value === 'string') {\n            return regexEscape(value);\n          }\n\n          var escapedValues = _.map(value, regexEscape);\n          return '(' + escapedValues.join('|') + ')';\n        }\n        case \"lucene\": {\n          if (typeof value === 'string') {\n            return luceneEscape(value);\n          }\n          var quotedValues = _.map(value, function(val) {\n            return '\\\"' + luceneEscape(val) + '\\\"';\n          });\n          return '(' + quotedValues.join(' OR ') + ')';\n        }\n        case \"pipe\": {\n          if (typeof value === 'string') {\n            return value;\n          }\n          return value.join('|');\n        }\n        default:  {\n          if (typeof value === 'string') {\n            return value;\n          }\n          return '{' + value.join(',') + '}';\n        }\n      }\n    };\n\n    this.setGrafanaVariable = function (name, value) {\n      this._grafanaVariables[name] = value;\n    };\n\n    this.variableExists = function(expression) {\n      this._regex.lastIndex = 0;\n      var match = this._regex.exec(expression);\n      return match && (self._index[match[1] || match[2]] !== void 0);\n    };\n\n    this.containsVariable = function(str, variableName) {\n      if (!str) {\n        return false;\n      }\n      return str.indexOf('$' + variableName) !== -1 || str.indexOf('[[' + variableName + ']]') !== -1;\n    };\n\n    this.highlightVariablesAsHtml = function(str) {\n      if (!str || !_.isString(str)) { return str; }\n\n      str = _.escape(str);\n      this._regex.lastIndex = 0;\n      return str.replace(this._regex, function(match, g1, g2) {\n        if (self._index[g1 || g2]) {\n          return '<span class=\"template-variable\">' + match + '</span>';\n        }\n        return match;\n      });\n    };\n\n    this.getAllValue = function(variable) {\n      if (variable.allValue) {\n        return variable.allValue;\n      }\n      var values = [];\n      for (var i = 1; i < variable.options.length; i++) {\n        values.push(variable.options[i].value);\n      }\n      return values;\n    };\n\n    this.replace = function(target, scopedVars, format) {\n      if (!target) { return target; }\n\n      var variable, systemValue, value;\n      this._regex.lastIndex = 0;\n\n      return target.replace(this._regex, function(match, g1, g2) {\n        variable = self._index[g1 || g2];\n\n        if (scopedVars) {\n          value = scopedVars[g1 || g2];\n          if (value) {\n            return self.formatValue(value.value, format, variable);\n          }\n        }\n\n        if (!variable) {\n          return match;\n        }\n\n        systemValue = self._grafanaVariables[variable.current.value];\n        if (systemValue) {\n          return self.formatValue(systemValue, format, variable);\n        }\n\n        value = variable.current.value;\n        if (self.isAllValue(value)) {\n          value = self.getAllValue(variable);\n          // skip formating of custom all values\n          if (variable.allValue) {\n            return value;\n          }\n        }\n\n        var res = self.formatValue(value, format, variable);\n        return res;\n      });\n    };\n\n    this.isAllValue = function(value) {\n      return value === '$__all' || Array.isArray(value) && value[0] === '$__all';\n    };\n\n    this.replaceWithText = function(target, scopedVars) {\n      if (!target) { return target; }\n\n      var variable;\n      this._regex.lastIndex = 0;\n\n      return target.replace(this._regex, function(match, g1, g2) {\n        if (scopedVars) {\n          var option = scopedVars[g1 || g2];\n          if (option) { return option.text; }\n        }\n\n        variable = self._index[g1 || g2];\n        if (!variable) { return match; }\n\n        return self._grafanaVariables[variable.current.value] || variable.current.text;\n      });\n    };\n\n    this.fillVariableValuesForUrl = function(params, scopedVars) {\n      _.each(this.variables, function(variable) {\n        var current = variable.current;\n        var value = current.value;\n\n        if (current.text === 'All') {\n          value = 'All';\n        }\n\n        if (scopedVars && scopedVars[variable.name] !== void 0) {\n          value = scopedVars[variable.name].value;\n        }\n\n        params['var-' + variable.name] = value;\n      });\n    };\n\n  });\n\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./public/app/features/templating/templateSrv.js\n// module id = 1184\n// module chunks = 0","define([\n  'angular',\n  'lodash',\n],\nfunction (angular, _) {\n  'use strict';\n\n  var module = angular.module('grafana.controllers');\n\n  module.controller('TemplateEditorCtrl', function($scope, datasourceSrv, templateSrv, templateValuesSrv) {\n\n    var replacementDefaults = {\n      type: 'query',\n      datasource: null,\n      refresh: 0,\n      name: '',\n      hide: 0,\n      options: [],\n      includeAll: false,\n      multi: false,\n    };\n\n    $scope.variableTypes = [\n      {value: \"query\",      text: \"Query\"},\n      {value: \"interval\",   text: \"Interval\"},\n      {value: \"datasource\", text: \"Data source\"},\n      {value: \"custom\",     text: \"Custom\"},\n    ];\n\n    $scope.refreshOptions = [\n      {value: 0, text: \"Never\"},\n      {value: 1, text: \"On Dashboard Load\"},\n      {value: 2, text: \"On Time Range Change\"},\n    ];\n\n    $scope.hideOptions = [\n      {value: 0, text: \"\"},\n      {value: 1, text: \"Label\"},\n      {value: 2, text: \"Variable\"},\n    ];\n\n    $scope.init = function() {\n      $scope.mode = 'list';\n\n      $scope.datasourceTypes = {};\n      $scope.datasources = _.filter(datasourceSrv.getMetricSources(), function(ds) {\n        $scope.datasourceTypes[ds.meta.id] = {text: ds.meta.name, value: ds.meta.id};\n        return !ds.meta.builtIn;\n      });\n\n      $scope.datasourceTypes = _.map($scope.datasourceTypes, function(value) {\n        return value;\n      });\n\n      $scope.variables = templateSrv.variables;\n      $scope.reset();\n\n      $scope.$watch('mode', function(val) {\n        if (val === 'new') {\n          $scope.reset();\n        }\n      });\n\n      $scope.$watch('current.datasource', function(val) {\n        if ($scope.mode === 'new') {\n          datasourceSrv.get(val).then(function(ds) {\n            if (ds.meta.defaultMatchFormat) {\n              $scope.current.allFormat = ds.meta.defaultMatchFormat;\n              $scope.current.multiFormat = ds.meta.defaultMatchFormat;\n            }\n          });\n        }\n      });\n    };\n\n    $scope.add = function() {\n      if ($scope.isValid()) {\n        $scope.variables.push($scope.current);\n        $scope.update();\n        $scope.updateSubmenuVisibility();\n      }\n    };\n\n    $scope.isValid = function() {\n      if (!$scope.current.name) {\n        $scope.appEvent('alert-warning', ['失败', '模板变量必须要一个名字']);\n        return false;\n      }\n\n      if (!$scope.current.name.match(/^\\w+$/)) {\n        $scope.appEvent('alert-warning', ['失败', '只有字符和数字被允许在变量名']);\n        return false;\n      }\n\n      var sameName = _.findWhere($scope.variables, { name: $scope.current.name });\n      if (sameName && sameName !== $scope.current) {\n        $scope.appEvent('alert-warning', ['失败', '名字相同的变量已存在']);\n        return false;\n      }\n\n      return true;\n    };\n\n    $scope.runQuery = function() {\n      return templateValuesSrv.updateOptions($scope.current).then(null, function(err) {\n        if (err.data && err.data.message) { err.message = err.data.message; }\n        $scope.appEvent(\"alert-error\", ['模板', '模板变量不能被初始化: ' + err.message]);\n      });\n    };\n\n    $scope.edit = function(variable) {\n      $scope.current = variable;\n      $scope.currentIsNew = false;\n      $scope.mode = 'edit';\n\n      if ($scope.current.datasource === void 0) {\n        $scope.current.datasource = null;\n        $scope.current.type = 'query';\n        $scope.current.allFormat = 'glob';\n      }\n    };\n\n    $scope.duplicate = function(variable) {\n      $scope.current = angular.copy(variable);\n      $scope.variables.push($scope.current);\n      $scope.current.name = 'copy_of_'+variable.name;\n      $scope.updateSubmenuVisibility();\n    };\n\n    $scope.update = function() {\n      if ($scope.isValid()) {\n        $scope.runQuery().then(function() {\n          $scope.reset();\n          $scope.mode = 'list';\n        });\n      }\n    };\n\n    $scope.reset = function() {\n      $scope.currentIsNew = true;\n      $scope.current = angular.copy(replacementDefaults);\n    };\n\n    $scope.typeChanged = function () {\n      if ($scope.current.type === 'interval') {\n        $scope.current.query = '1m,10m,30m,1h,6h,12h,1d,7d,14d,30d';\n      }\n\n      if ($scope.current.type === 'query') {\n        $scope.current.query = '';\n      }\n\n      if ($scope.current.type === 'datasource') {\n        $scope.current.query = $scope.datasourceTypes[0].value;\n        $scope.current.regex = '';\n        $scope.current.refresh = 1;\n      }\n    };\n\n    $scope.removeVariable = function(variable) {\n      var index = _.indexOf($scope.variables, variable);\n      $scope.variables.splice(index, 1);\n      $scope.updateSubmenuVisibility();\n    };\n\n  });\n\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./public/app/features/templating/editorCtrl.js\n// module id = 1185\n// module chunks = 0","define([\n  'angular',\n  'lodash',\n  'app/core/utils/kbn',\n],\nfunction (angular, _, kbn) {\n  'use strict';\n\n  kbn = kbn.default;\n\n  var module = angular.module('grafana.services');\n\n  module.service('templateValuesSrv', function($q, $rootScope, datasourceSrv, $location, templateSrv, timeSrv) {\n    var self = this;\n\n    function getNoneOption() { return { text: 'None', value: '', isNone: true }; }\n\n    // update time variant variables\n    $rootScope.onAppEvent('refresh', function() {\n\n      // look for interval variables\n      var intervalVariable = _.findWhere(self.variables, { type: 'interval' });\n      if (intervalVariable) {\n        self.updateAutoInterval(intervalVariable);\n      }\n\n      // update variables with refresh === 2\n      var promises = self.variables\n        .filter(function(variable) {\n          return variable.refresh === 2;\n        }).map(function(variable) {\n          return self.updateOptions(variable);\n        });\n\n      return $q.all(promises);\n\n    }, $rootScope);\n\n    this.init = function(dashboard) {\n      this.variables = dashboard.templating.list;\n      templateSrv.init(this.variables);\n\n      var queryParams = $location.search();\n      var promises = [];\n\n      // use promises to delay processing variables that\n      // depend on other variables.\n      this.variableLock = {};\n      _.forEach(this.variables, function(variable) {\n        self.variableLock[variable.name] = $q.defer();\n      });\n\n      for (var i = 0; i < this.variables.length; i++) {\n        var variable = this.variables[i];\n        promises.push(this.processVariable(variable, queryParams));\n      }\n\n      return $q.all(promises);\n    };\n\n    this.processVariable = function(variable, queryParams) {\n      var dependencies = [];\n      var lock = self.variableLock[variable.name];\n\n      // determine our dependencies.\n      if (variable.type === \"query\") {\n        _.forEach(this.variables, function(v) {\n          // both query and datasource can contain variable\n          if (templateSrv.containsVariable(variable.query, v.name) ||\n              templateSrv.containsVariable(variable.datasource, v.name)) {\n            dependencies.push(self.variableLock[v.name].promise);\n          }\n        });\n      }\n\n      return $q.all(dependencies).then(function() {\n        var urlValue = queryParams['var-' + variable.name];\n        if (urlValue !== void 0) {\n          return self.setVariableFromUrl(variable, urlValue).then(lock.resolve);\n        }\n        else if (variable.refresh === 1 || variable.refresh === 2) {\n          return self.updateOptions(variable).then(function() {\n            if (_.isEmpty(variable.current) && variable.options.length) {\n              console.log(\"setting current for %s\", variable.name);\n              self.setVariableValue(variable, variable.options[0]);\n            }\n            lock.resolve();\n          });\n        }\n        else if (variable.type === 'interval') {\n          self.updateAutoInterval(variable);\n          lock.resolve();\n        } else {\n          lock.resolve();\n        }\n      });\n    };\n\n    this.setVariableFromUrl = function(variable, urlValue) {\n      var promise = $q.when(true);\n\n      if (variable.refresh) {\n        promise = this.updateOptions(variable);\n      }\n\n      return promise.then(function() {\n        var option = _.findWhere(variable.options, { text: urlValue });\n        option = option || { text: urlValue, value: urlValue };\n\n        self.updateAutoInterval(variable);\n        return self.setVariableValue(variable, option, true);\n      });\n    };\n\n    this.updateAutoInterval = function(variable) {\n      if (!variable.auto) { return; }\n\n      // add auto option if missing\n      if (variable.options.length && variable.options[0].text !== 'auto') {\n        variable.options.unshift({ text: 'auto', value: '$__auto_interval' });\n      }\n\n      var interval = kbn.calculateInterval(timeSrv.timeRange(), variable.auto_count, (variable.auto_min ? \">\"+variable.auto_min : null));\n      templateSrv.setGrafanaVariable('$__auto_interval', interval);\n    };\n\n    this.setVariableValue = function(variable, option, initPhase) {\n      variable.current = angular.copy(option);\n\n      if (_.isArray(variable.current.value)) {\n        variable.current.text = variable.current.value.join(' + ');\n      }\n\n      self.selectOptionsForCurrentValue(variable);\n      templateSrv.updateTemplateData();\n\n      // on first load, variable loading is ordered to ensure\n      // that parents are updated before children.\n      if (initPhase) {\n        return $q.when();\n      }\n\n      return self.updateOptionsInChildVariables(variable);\n    };\n\n    this.variableUpdated = function(variable) {\n      templateSrv.updateTemplateData();\n      return this.updateOptionsInChildVariables(variable);\n    };\n\n    this.updateOptionsInChildVariables = function(updatedVariable) {\n      var promises = _.map(self.variables, function(otherVariable) {\n        if (otherVariable === updatedVariable) {\n          return;\n        }\n        if (templateSrv.containsVariable(otherVariable.query, updatedVariable.name) ||\n            templateSrv.containsVariable(otherVariable.datasource, updatedVariable.name)) {\n          return self.updateOptions(otherVariable);\n        }\n      });\n\n      return $q.all(promises);\n    };\n\n    this._updateNonQueryVariable = function(variable) {\n      if (variable.type === 'datasource') {\n        self.updateDataSourceVariable(variable);\n        return;\n      }\n\n      // extract options in comma seperated string\n      variable.options = _.map(variable.query.split(/[,]+/), function(text) {\n        return { text: text.trim(), value: text.trim() };\n      });\n\n      if (variable.type === 'interval') {\n        self.updateAutoInterval(variable);\n      }\n\n      if (variable.type === 'custom' && variable.includeAll) {\n        self.addAllOption(variable);\n      }\n    };\n\n    this.updateDataSourceVariable = function(variable) {\n      var options = [];\n      var sources = datasourceSrv.getMetricSources({skipVariables: true});\n      var regex;\n\n      if (variable.regex) {\n        regex = kbn.stringToJsRegex(templateSrv.replace(variable.regex));\n      }\n\n      for (var i = 0; i < sources.length; i++) {\n        var source = sources[i];\n        // must match on type\n        if (source.meta.id !== variable.query) {\n          continue;\n        }\n\n        if (regex && !regex.exec(source.name)) {\n          continue;\n        }\n\n        options.push({text: source.name, value: source.name});\n      }\n\n      if (options.length === 0) {\n        options.push({text: 'No datasurces found', value: ''});\n      }\n\n      variable.options = options;\n    };\n\n    this.updateOptions = function(variable) {\n      if (variable.type !== 'query') {\n        self._updateNonQueryVariable(variable);\n        return self.validateVariableSelectionState(variable);\n      }\n\n      return datasourceSrv.get(variable.datasource)\n        .then(_.partial(this.updateOptionsFromMetricFindQuery, variable))\n        .then(_.partial(this.updateTags, variable))\n        .then(_.partial(this.validateVariableSelectionState, variable));\n    };\n\n    this.selectOptionsForCurrentValue = function(variable) {\n      var i, y, value, option;\n\n      for (i = 0; i < variable.options.length; i++) {\n        option = variable.options[i];\n        option.selected = false;\n        if (_.isArray(variable.current.value)) {\n          for (y = 0; y < variable.current.value.length; y++) {\n            value = variable.current.value[y];\n            if (option.value === value) {\n              option.selected = true;\n            }\n          }\n        } else if (option.value === variable.current.value) {\n          option.selected = true;\n        }\n      }\n    };\n\n    this.validateVariableSelectionState = function(variable) {\n      if (!variable.current) {\n        if (!variable.options.length) { return; }\n        return self.setVariableValue(variable, variable.options[0], true);\n      }\n\n      if (_.isArray(variable.current.value)) {\n        self.selectOptionsForCurrentValue(variable);\n      } else {\n        var currentOption = _.findWhere(variable.options, {text: variable.current.text});\n        if (currentOption) {\n          return self.setVariableValue(variable, currentOption, true);\n        } else {\n          if (!variable.options.length) { return; }\n          return self.setVariableValue(variable, variable.options[0]);\n        }\n      }\n    };\n\n    this.updateTags = function(variable, datasource) {\n      if (variable.useTags) {\n        return datasource.metricFindQuery(variable.tagsQuery).then(function (results) {\n          variable.tags = [];\n          for (var i = 0; i < results.length; i++) {\n            variable.tags.push(results[i].text);\n          }\n          return datasource;\n        });\n      } else {\n        delete variable.tags;\n      }\n\n      return datasource;\n    };\n\n    this.updateOptionsFromMetricFindQuery = function(variable, datasource) {\n      return datasource.metricFindQuery(variable.query).then(function (results) {\n        variable.options = self.metricNamesToVariableValues(variable, results);\n        if (variable.includeAll) {\n          self.addAllOption(variable);\n        }\n        if (!variable.options.length) {\n          variable.options.push(getNoneOption());\n        }\n        return datasource;\n      });\n    };\n\n    this.getValuesForTag = function(variable, tagKey) {\n      return datasourceSrv.get(variable.datasource).then(function(datasource) {\n        var query = variable.tagValuesQuery.replace('$tag', tagKey);\n        return datasource.metricFindQuery(query).then(function (results) {\n          return _.map(results, function(value) {\n            return value.text;\n          });\n        });\n      });\n    };\n\n    this.metricNamesToVariableValues = function(variable, metricNames) {\n      var regex, options, i, matches;\n      options = {}; // use object hash to remove duplicates\n\n      if (variable.regex) {\n        regex = kbn.stringToJsRegex(templateSrv.replace(variable.regex));\n      }\n\n      for (i = 0; i < metricNames.length; i++) {\n        var item = metricNames[i];\n        var value = item.value || item.text;\n        var text = item.text || item.value;\n\n        if (regex) {\n          matches = regex.exec(value);\n          if (!matches) { continue; }\n          if (matches.length > 1) {\n            value = matches[1];\n            text = value;\n          }\n        }\n\n        options[value] = {text: text, value: value};\n      }\n\n      return _.sortBy(options, 'text');\n    };\n\n    this.addAllOption = function(variable) {\n      variable.options.unshift({text: 'All', value: \"$__all\"});\n    };\n\n  });\n\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./public/app/features/templating/templateValuesSrv.js\n// module id = 1186\n// module chunks = 0","define([\n  './dashboardCtrl',\n  './dashboardLoaderSrv',\n  './dashnav/dashnav',\n  './submenu/submenu',\n  './saveDashboardAsCtrl',\n  './rowCtrl',\n  './shareModalCtrl',\n  './shareSnapshotCtrl',\n  './dashboardSrv',\n  './keybindings',\n  './viewStateSrv',\n  './timeSrv',\n  './unsavedChangesSrv',\n  './timepicker/timepicker',\n  './graphiteImportCtrl',\n  './dynamicDashboardSrv',\n  './importCtrl',\n  './impression_store',\n], function () {});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./public/app/features/dashboard/all.js\n// module id = 1187\n// module chunks = 0","define([\n  'angular',\n  'jquery',\n],\nfunction(angular, $) {\n  \"use strict\";\n\n  var module = angular.module('grafana.services');\n\n  module.service('dashboardKeybindings', function($rootScope, keyboardManager, $_modal, $q) {\n\n    this.shortcuts = function(scope) {\n\n      scope.$on('$destroy', function() {\n        keyboardManager.unbindAll();\n      });\n\n      var helpModalScope = null;\n      keyboardManager.bind('shift+?', function() {\n        if (helpModalScope) { return; }\n\n        helpModalScope = $rootScope.$new();\n        var helpModal = $_modal({\n          template: 'public/app/partials/help_modal.html',\n          persist: false,\n          show: false,\n          scope: helpModalScope,\n          keyboard: false\n        });\n\n        helpModalScope.$on('$destroy', function() { helpModalScope = null; });\n        $q.when(helpModal).then(function(modalEl) { modalEl.modal('show'); });\n\n      }, { inputDisabled: true });\n\n      keyboardManager.bind('f', function() {\n        scope.appEvent('show-dash-search');\n      }, { inputDisabled: true });\n\n      keyboardManager.bind('ctrl+o', function() {\n        var current = scope.dashboard.sharedCrosshair;\n        scope.dashboard.sharedCrosshair = !current;\n        scope.broadcastRefresh();\n      }, { inputDisabled: true });\n\n      keyboardManager.bind('ctrl+h', function() {\n        var current = scope.dashboard.hideControls;\n        scope.dashboard.hideControls = !current;\n      }, { inputDisabled: true });\n\n      keyboardManager.bind('ctrl+s', function(evt) {\n        scope.appEvent('save-dashboard', evt);\n      }, { inputDisabled: true });\n\n      keyboardManager.bind('r', function() {\n        scope.broadcastRefresh();\n      }, { inputDisabled: true });\n\n      keyboardManager.bind('ctrl+z', function(evt) {\n        scope.appEvent('zoom-out', evt);\n      }, { inputDisabled: true });\n\n      keyboardManager.bind('left', function(evt) {\n        scope.appEvent('shift-time-backward', evt);\n      }, { inputDisabled: true });\n\n      keyboardManager.bind('right', function(evt) {\n        scope.appEvent('shift-time-forward', evt);\n      }, { inputDisabled: true });\n\n      keyboardManager.bind('ctrl+e', function(evt) {\n        scope.appEvent('export-dashboard', evt);\n      }, { inputDisabled: true });\n\n      keyboardManager.bind('ctrl+i', function(evt) {\n        scope.appEvent('quick-snapshot', evt);\n      }, { inputDisabled: true });\n\n      keyboardManager.bind('esc', function() {\n        var popups = $('.popover.in');\n        if (popups.length > 0) {\n          return;\n        }\n        // close modals\n        var modalData = $(\".modal\").data();\n        if (modalData && modalData.$scope && modalData.$scope.dismiss) {\n          modalData.$scope.dismiss();\n        }\n\n        scope.appEvent('hide-dash-editor');\n\n        scope.exitFullscreen();\n      }, { inputDisabled: true });\n    };\n  });\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./public/app/features/dashboard/keybindings.js\n// module id = 1188\n// module chunks = 0","define([\n  'angular',\n  'jquery',\n  'app/core/config',\n  'moment',\n],\nfunction (angular, $, config, moment) {\n  \"use strict\";\n\n  var module = angular.module('grafana.controllers');\n\n  module.controller('DashboardCtrl', function(\n      $scope,\n      $rootScope,\n      dashboardKeybindings,\n      timeSrv,\n      templateValuesSrv,\n      dynamicDashboardSrv,\n      dashboardSrv,\n      unsavedChangesSrv,\n      dashboardViewStateSrv,\n      contextSrv,\n      $timeout,\n      $translate\n    ) {\n\n    $scope.editor = { index: 0 };\n    $scope.panels = config.panels;\n\n    var resizeEventTimeout;\n\n    this.init = function(dashboard) {\n      $scope.resetRow();\n      $scope.registerWindowResizeEvent();\n      $scope.onAppEvent('show-json-editor', $scope.showJsonEditor);\n      $scope.setupDashboard(dashboard);\n    };\n\n    $scope.setupDashboard = function(data) {\n      $rootScope.performance.dashboardLoadStart = new Date().getTime();\n      $rootScope.performance.panelsInitialized = 0;\n      $rootScope.performance.panelsRendered = 0;\n\n      var dashboard = dashboardSrv.create(data.dashboard, data.meta);\n      dashboardSrv.setCurrent(dashboard);\n\n      // init services\n      timeSrv.init(dashboard);\n\n      // template values service needs to initialize completely before\n      // the rest of the dashboard can load\n      templateValuesSrv.init(dashboard).finally(function() {\n        dynamicDashboardSrv.init(dashboard);\n        unsavedChangesSrv.init(dashboard, $scope);\n\n        $scope.dashboard = dashboard;\n        $scope.dashboardMeta = dashboard.meta;\n        $scope.dashboardViewState = dashboardViewStateSrv.create($scope);\n\n        dashboardKeybindings.shortcuts($scope);\n\n        $scope.updateSubmenuVisibility();\n        $scope.setWindowTitleAndTheme();\n\n        $scope.appEvent(\"dashboard-loaded\", $scope.dashboard);\n      }).catch(function(err) {\n        if (err.data && err.data.message) { err.message = err.data.message; }\n        $scope.appEvent(\"alert-error\", [$translate.i18n.page_dash_init_err, $translate.i18n.page_dash_err_tip2 + ': ' + err.message]);\n      });\n    };\n\n    $scope.updateSubmenuVisibility = function() {\n      $scope.submenuEnabled = $scope.dashboard.isSubmenuFeaturesEnabled();\n    };\n\n    $scope.setWindowTitleAndTheme = function() {\n      window.document.title = config.window_title_prefix + $scope.dashboard.title;\n    };\n\n    $scope.broadcastRefresh = function() {\n      $rootScope.performance.panelsRendered = 0;\n      $rootScope.$broadcast('refresh');\n    };\n\n    $scope.addRow = function(dash, row) {\n      dash.rows.push(row);\n    };\n\n    $scope.addRowDefault = function() {\n      $scope.resetRow();\n      $scope.row.title = 'New row';\n      $scope.addRow($scope.dashboard, $scope.row);\n    };\n\n    $scope.resetRow = function() {\n      $scope.row = {\n        title: '',\n        height: '250px',\n        editable: true,\n      };\n    };\n\n    $scope.showJsonEditor = function(evt, options) {\n      var editScope = $rootScope.$new();\n      editScope.object = options.object;\n      editScope.updateHandler = options.updateHandler;\n      $scope.appEvent('show-dash-editor', { src: 'public/app/partials/edit_json.html', scope: editScope });\n    };\n\n    $scope.onDrop = function(panelId, row, dropTarget) {\n      var info = $scope.dashboard.getPanelInfoById(panelId);\n      if (dropTarget) {\n        var dropInfo = $scope.dashboard.getPanelInfoById(dropTarget.id);\n        dropInfo.row.panels[dropInfo.index] = info.panel;\n        info.row.panels[info.index] = dropTarget;\n        var dragSpan = info.panel.span;\n        info.panel.span = dropTarget.span;\n        dropTarget.span = dragSpan;\n      }\n      else {\n        info.row.panels.splice(info.index, 1);\n        info.panel.span = 12 - $scope.dashboard.rowSpan(row);\n        row.panels.push(info.panel);\n      }\n\n      $rootScope.$broadcast('render');\n    };\n\n    $scope.registerWindowResizeEvent = function() {\n      angular.element(window).bind('resize', function() {\n        $timeout.cancel(resizeEventTimeout);\n        resizeEventTimeout = $timeout(function() { $scope.$broadcast('render'); }, 200);\n      });\n      $scope.$on('$destroy', function() {\n        angular.element(window).unbind('resize');\n      });\n    };\n\n    $scope.timezoneChanged = function() {\n      $rootScope.$broadcast(\"refresh\");\n    };\n\n    $scope.formatDate = function(date) {\n      return moment(date).format('MMM Do YYYY, h:mm:ss a');\n    };\n\n  });\n\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./public/app/features/dashboard/dashboardCtrl.js\n// module id = 1189\n// module chunks = 0","///<reference path=\"../../../headers/common.d.ts\" />\n\nimport _ from 'lodash';\nimport moment from 'moment';\nimport angular from 'angular';\n\nexport class DashNavCtrl {\n\n  /** @ngInject */\n  constructor($scope, $rootScope, alertSrv, $location, playlistSrv, backendSrv, $timeout, $translate) {\n\n    $scope.init = function() {\n      $scope.onAppEvent('save-dashboard', $scope.saveDashboard);\n      $scope.onAppEvent('delete-dashboard', $scope.deleteDashboard);\n      $scope.onAppEvent('export-dashboard', $scope.snapshot);\n      $scope.onAppEvent('quick-snapshot', $scope.quickSnapshot);\n\n      $scope.showSettingsMenu = $scope.dashboardMeta.canEdit || $scope.contextSrv.isEditor;\n\n      if ($scope.dashboardMeta.isSnapshot) {\n        $scope.showSettingsMenu = false;\n        var meta = $scope.dashboardMeta;\n        $scope.titleTooltip = 'Created: &nbsp;' + moment(meta.created).calendar();\n        if (meta.expires) {\n          $scope.titleTooltip += '<br>Expires: &nbsp;' + moment(meta.expires).fromNow() + '<br>';\n        }\n      }\n    };\n\n    $scope.openEditView = function(editview) {\n      var search = _.extend($location.search(), {editview: editview});\n      $location.search(search);\n    };\n\n    $scope.starDashboard = function() {\n      if ($scope.dashboardMeta.isStarred) {\n        backendSrv.delete('/api/user/stars/dashboard/' + $scope.dashboard.id).then(function() {\n          $scope.dashboardMeta.isStarred = false;\n        });\n      } else {\n        backendSrv.post('/api/user/stars/dashboard/' + $scope.dashboard.id).then(function() {\n          $scope.dashboardMeta.isStarred = true;\n        });\n      }\n    };\n\n    $scope.shareDashboard = function(tabIndex) {\n      var modalScope = $scope.$new();\n      modalScope.tabIndex = tabIndex;\n\n      $scope.appEvent('show-modal', {\n        src: 'public/app/features/dashboard/partials/shareModal.html',\n        scope: modalScope\n      });\n    };\n\n    $scope.quickSnapshot = function() {\n      $scope.shareDashboard(1);\n    };\n\n    $scope.openSearch = function() {\n      $scope.appEvent('show-dash-search');\n    };\n\n    $scope.hideTooltip = function(evt) {\n      angular.element(evt.currentTarget).tooltip('hide');\n      $scope.appEvent('hide-dash-search');\n    };\n\n    $scope.makeEditable = function() {\n      $scope.dashboard.editable = true;\n\n      var clone = $scope.dashboard.getSaveModelClone();\n\n      backendSrv.saveDashboard(clone, {overwrite: false}).then(function(data) {\n        $scope.dashboard.version = data.version;\n        $scope.appEvent('dashboard-saved', $scope.dashboard);\n        $scope.appEvent('alert-success', ['Dashboard saved', 'Saved as ' + clone.title]);\n\n        // force refresh whole page\n        window.location.href = window.location.href;\n      }, $scope.handleSaveDashError);\n    };\n\n    $scope.saveDashboard = function(options) {\n      if ($scope.dashboardMeta.canSave === false) {\n        return;\n      }\n\n      if (!$scope.dashboard.system) {\n        $scope.appEvent('alert-warning', [$translate.i18n.i18n_fail, $translate.i18n.i18n_input_full]);\n        return;\n      }\n\n      if (_.isEmpty($scope.dashboard.title)) {\n        $scope.appEvent('alert-warning', [$translate.i18n.i18n_fail, $translate.i18n.i18n_input_full]);\n        return;\n      }\n      var clone = $scope.dashboard.getSaveModelClone();\n\n      backendSrv.saveDashboard(clone, options).then(function(data) {\n        $scope.dashboard.version = data.version;\n        $scope.appEvent('dashboard-saved', $scope.dashboard);\n\n        var dashboardUrl = '/dashboard/db/' + data.slug;\n\n        if (dashboardUrl !== $location.path()) {\n          $location.url(dashboardUrl);\n        }\n        backendSrv.updateSystemId(clone.system);\n        backendSrv.post(\"/api/dashboards/system\", {DashId: data.id.toString(), SystemId: clone.system});\n        $scope.appEvent('alert-success', [$translate.i18n.i18n_success, $translate.i18n.i18n_saveAs + clone.title]);\n      }, $scope.handleSaveDashError);\n    };\n\n    $scope.handleSaveDashError = function(err) {\n      if (err.data && err.data.status === \"version-mismatch\") {\n        err.isHandled = true;\n\n        $scope.appEvent('confirm-modal', {\n          title: '冲突',\n          text: '有人已经更新这仪表盘了',\n          text2: '您是否想直接覆盖并且保存您的操作',\n          yesText: \"保存 & 覆盖\",\n          icon: \"fa-warning\",\n          onConfirm: function() {\n            $scope.saveDashboard({overwrite: true});\n          }\n        });\n      }\n\n      if (err.data && err.data.status === \"name-exists\") {\n        err.isHandled = true;\n\n        $scope.appEvent('confirm-modal', {\n          title: $translate.i18n.i18n_confilct,\n          text: $translate.i18n.page_dash_save_name,\n          text2: $translate.i18n.page_dash_edit_name,\n          yesText: $translate.i18n.i18n_modify,\n          icon: \"fa-warning\"\n        });\n      }\n    };\n\n    $scope.deleteDashboard = function() {\n      $scope.appEvent('confirm-modal', {\n        title: $translate.i18n.i18n_delete,\n        text: $translate.i18n.i18n_sure_operator,\n        text2: $scope.dashboard.title,\n        icon: 'fa-trash',\n        yesText: $translate.i18n.i18n_delete,\n        onConfirm: function() {\n          $scope.deleteDashboardConfirmed();\n        }\n      });\n    };\n\n    $scope.deleteDashboardConfirmed = function() {\n      backendSrv.delete('/api/dashboards/db/' + $scope.dashboardMeta.slug).then(function() {\n        $scope.appEvent('alert-success', ['Dashboard ', $scope.dashboard.title + ' Removed']);\n        $location.url('/');\n      });\n    };\n\n    $scope.saveDashboardAs = function() {\n      var newScope = $rootScope.$new();\n      newScope.clone = $scope.dashboard.getSaveModelClone();\n      newScope.clone.editable = true;\n      newScope.clone.hideControls = false;\n\n      $scope.appEvent('show-modal', {\n        src: 'public/app/features/dashboard/partials/saveDashboardAs.html',\n        scope: newScope,\n        modalClass: 'modal--narrow'\n      });\n    };\n\n    $scope.exportDashboard = function() {\n      var clone = $scope.dashboard.getSaveModelClone();\n      clone.system = 0;\n      var blob = new Blob([angular.toJson(clone, true)], { type: \"application/json;charset=utf-8\" });\n      var wnd: any = window;\n      wnd.saveAs(blob, $scope.dashboard.title + '-' + new Date().getTime() + '.json');\n    };\n\n    $scope.snapshot = function() {\n      $scope.dashboard.snapshot = true;\n      $rootScope.$broadcast('refresh');\n\n      $timeout(function() {\n        $scope.exportDashboard();\n        $scope.dashboard.snapshot = false;\n        $scope.appEvent('dashboard-snapshot-cleanup');\n      }, 1000);\n\n    };\n\n    $scope.editJson = function() {\n      var clone = $scope.dashboard.getSaveModelClone();\n      $scope.appEvent('show-json-editor', { object: clone });\n    };\n\n    $scope.stopPlaylist = function() {\n      playlistSrv.stop(1);\n    };\n\n    $scope.newDashboard = function() {\n      $rootScope.appEvent('show-modal', {\n        src: 'public/app/partials/select_system.html',\n        scope: $scope.$new(),\n      });\n    };\n\n    $scope.init();\n  }\n}\n\nexport function dashNavDirective() {\n  return {\n    restrict: 'E',\n    templateUrl: 'public/app/features/dashboard/dashnav/dashnav.html',\n    controller: DashNavCtrl,\n    transclude: true,\n  };\n}\n\nangular.module('grafana.directives').directive('dashnav', dashNavDirective);\n\n\n\n// WEBPACK FOOTER //\n// node_modules/tslint-loader??ref--0!./public/app/features/dashboard/dashnav/dashnav.ts","///<reference path=\"../../../headers/common.d.ts\" />\n\nimport angular from 'angular';\n\nexport class SubmenuCtrl {\n  annotations: any;\n  variables: any;\n  dashboard: any;\n\n  /** @ngInject */\n  constructor(private $rootScope, private templateValuesSrv, private dynamicDashboardSrv, private $scope) {\n    this.annotations = $rootScope.mainScope.dashboard.templating.list;\n    this.variables = $rootScope.mainScope.dashboard.templating.list;\n  }\n\n  disableAnnotation(annotation) {\n    annotation.enable = !annotation.enable;\n    this.$rootScope.$broadcast('refresh');\n  }\n\n  getValuesForTag(variable, tagKey) {\n    return this.templateValuesSrv.getValuesForTag(variable, tagKey);\n  }\n\n  variableUpdated(variable) {\n    this.templateValuesSrv.variableUpdated(variable).then(() => {\n      this.dynamicDashboardSrv.update(this.dashboard);\n      this.$rootScope.$emit('template-variable-value-updated');\n      this.$rootScope.$broadcast('refresh');\n    });\n  }\n}\n\nexport function submenuDirective() {\n  return {\n    restrict: 'E',\n    templateUrl: 'public/app/features/dashboard/submenu/submenu.html',\n    controller: SubmenuCtrl,\n    bindToController: true,\n    controllerAs: 'ctrl',\n    scope: {\n      dashboard: \"=\",\n    }\n  };\n}\n\nangular.module('grafana.directives').directive('dashboardSubmenu', submenuDirective);\n\n\n\n// WEBPACK FOOTER //\n// node_modules/tslint-loader??ref--0!./public/app/features/dashboard/submenu/submenu.ts","define([\n  'angular',\n],\nfunction (angular) {\n  'use strict';\n\n  var module = angular.module('grafana.controllers');\n\n  module.controller('SaveDashboardAsCtrl', function($scope, backendSrv, $location, $translate) {\n\n    $scope.init = function() {\n      $scope.clone.id = null;\n      $scope.clone.editable = true;\n      $scope.clone.title = $scope.clone.title + \" Copy\";\n    };\n\n    function saveDashboard(options) {\n      return backendSrv.saveDashboard($scope.clone, options).then(function(result) {\n        $scope.appEvent('alert-success', [$translate.i18n.i18n_success, $translate.i18n.i18n_saveAs + ' ' + $scope.clone.title]);\n\n        $location.url('/dashboard/db/' + result.slug);\n\n        $scope.appEvent('dashboard-saved', $scope.clone);\n        backendSrv.updateSystemId(clone.system);\n        backendSrv.post(\"/api/dashboards/system\", {DashId: result.id.toString(), SystemId: clone.system});\n        $scope.dismiss();\n      });\n    }\n\n    $scope.keyDown = function (evt) {\n      if (evt.keyCode === 13) {\n        $scope.saveClone();\n      }\n    };\n\n    $scope.saveClone = function() {\n      saveDashboard({overwrite: false}).then(null, function(err) {\n        if (err.data && err.data.status === \"name-exists\") {\n          err.isHandled = true;\n\n          $scope.appEvent('confirm-modal', {\n            title: $translate.i18n.page_dash_save_name,\n            text: $translate.i18n.page_dash_override_tip,\n            yesText: $translate.i18n.i18n_save_override,\n            icon: \"fa-warning\",\n            onConfirm: function() {\n              saveDashboard({overwrite: true});\n            }\n          });\n        }\n      });\n    };\n  });\n\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./public/app/features/dashboard/saveDashboardAsCtrl.js\n// module id = 1192\n// module chunks = 0","define([\n  'angular',\n  'lodash',\n  'app/core/config'\n],\nfunction (angular, _, config) {\n  'use strict';\n\n  var module = angular.module('grafana.controllers');\n\n  module.controller('RowCtrl', function($scope, $rootScope, $timeout) {\n    var _d = {\n      title: \"Row\",\n      height: \"150px\",\n      collapse: false,\n      editable: true,\n      panels: [],\n    };\n\n    _.defaults($scope.row,_d);\n\n    $scope.correlationThreshold = 100;\n\n    $scope.init = function() {\n      $scope.editor = {index: 0};\n    };\n\n    $scope.togglePanelMenu = function(posX) {\n      $scope.showPanelMenu = !$scope.showPanelMenu;\n      $scope.panelMenuPos = posX;\n    };\n\n    $scope.toggleRow = function(row) {\n      row.collapse = row.collapse ? false : true;\n    };\n\n    $scope.addPanel = function(panel) {\n      $scope.dashboard.addPanel(panel, $scope.row);\n    };\n\n    $scope.deleteRow = function() {\n      function delete_row() {\n        $scope.dashboard.rows = _.without($scope.dashboard.rows, $scope.row);\n      }\n\n      if (!$scope.row.panels.length) {\n        delete_row();\n        return;\n      }\n\n      $scope.appEvent('confirm-modal', {\n        title: 'Delete',\n        text: '您是否想删除整行',\n        icon: 'fa-trash',\n        yesText: 'Delete',\n        onConfirm: function() {\n          delete_row();\n        }\n      });\n    };\n\n    $scope.editRow = function() {\n      $scope.appEvent('show-dash-editor', {\n        src: 'public/app/partials/roweditor.html',\n        scope: $scope.$new()\n      });\n    };\n\n    $scope.moveRow = function(direction) {\n      var rowsList = $scope.dashboard.rows;\n      var rowIndex = _.indexOf(rowsList, $scope.row);\n      var newIndex = rowIndex;\n      switch(direction) {\n        case 'up': {\n          newIndex = rowIndex - 1;\n          break;\n        }\n        case 'down': {\n          newIndex = rowIndex + 1;\n          break;\n        }\n        case 'top': {\n          newIndex = 0;\n          break;\n        }\n        case 'bottom': {\n          newIndex = rowsList.length - 1;\n          break;\n        }\n        default: {\n          newIndex = rowIndex;\n        }\n      }\n      if (newIndex >= 0 && newIndex <= (rowsList.length - 1)) {\n        _.move(rowsList, rowIndex, newIndex);\n      }\n    };\n\n    $scope.addPanelDefault = function(type) {\n      var defaultSpan = 12;\n      var _as = 12 - $scope.dashboard.rowSpan($scope.row);\n\n      var panel = {\n        title: config.new_panel_title,\n        error: false,\n        span: _as < defaultSpan && _as > 0 ? _as : defaultSpan,\n        editable: true,\n        type: type,\n        isNew: true,\n      };\n\n      $scope.addPanel(panel);\n\n      $timeout(function() {\n        $scope.dashboardViewState.update({fullscreen: true, edit: true, panelId: panel.id });\n      });\n    };\n\n    $scope.setHeight = function(height) {\n      $scope.row.height = height;\n      $scope.$broadcast('render');\n    };\n\n    $scope.init();\n  });\n\n  module.directive('rowHeight', function() {\n    return function(scope, element) {\n      scope.$watchGroup(['row.collapse', 'row.height'], function() {\n        element.css({ minHeight: scope.row.collapse ? '5px' : scope.row.height });\n      });\n\n      scope.onAppEvent('panel-fullscreen-enter', function(evt, info) {\n        var hasPanel = _.findWhere(scope.row.panels, {id: info.panelId});\n        if (!hasPanel) {\n          element.hide();\n        }\n      });\n\n      scope.onAppEvent('panel-fullscreen-exit', function() {\n        element.show();\n      });\n    };\n  });\n\n  module.directive('panelWidth', function() {\n    return function(scope, element) {\n      function updateWidth() {\n        element[0].style.width = ((scope.panel.span / 1.2) * 10) + '%';\n      }\n\n      scope.onAppEvent('panel-fullscreen-enter', function(evt, info) {\n        if (scope.panel.id !== info.panelId) {\n          element.hide();\n        } else {\n          element[0].style.width = '100%';\n        }\n      });\n\n      scope.onAppEvent('panel-fullscreen-exit', function(evt, info) {\n        if (scope.panel.id !== info.panelId) {\n          element.show();\n        } else {\n          updateWidth();\n        }\n      });\n\n      scope.$watch('panel.span', updateWidth);\n    };\n  });\n\n  module.directive('panelDropZone', function() {\n    return function(scope, element) {\n      scope.$on(\"ANGULAR_DRAG_START\", function() {\n        var dropZoneSpan = 12 - scope.dashboard.rowSpan(scope.row);\n\n        if (dropZoneSpan > 0) {\n          element.find('.panel-container').css('height', scope.row.height);\n          element[0].style.width = ((dropZoneSpan / 1.2) * 10) + '%';\n          element.show();\n        }\n      });\n\n      scope.$on(\"ANGULAR_DRAG_END\", function() {\n        element.hide();\n      });\n    };\n  });\n\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./public/app/features/dashboard/rowCtrl.js\n// module id = 1193\n// module chunks = 0","define(['angular',\n  'lodash',\n  'require',\n  'app/core/config',\n],\nfunction (angular, _, require, config) {\n  'use strict';\n\n  var module = angular.module('grafana.controllers');\n\n  module.controller('ShareModalCtrl', function($scope, $rootScope, $location, $timeout, timeSrv, $element, templateSrv, linkSrv, contextSrv) {\n\n    $scope.options = { forCurrent: true, includeTemplateVars: true, theme: 'current' };\n    $scope.editor = { index: $scope.tabIndex || 0};\n\n    $scope.init = function() {\n      $scope.modeSharePanel = $scope.panel ? true : false;\n\n      $scope.tabs = [{title: '链接', src: 'shareLink.html'}];\n\n      if ($scope.modeSharePanel) {\n        $scope.modalTitle = 'Share Panel';\n        $scope.tabs.push({title: '嵌入代码', src: 'shareEmbed.html'});\n      } else {\n        $scope.modalTitle = 'Share Dashboard';\n      }\n\n      if (!$scope.dashboard.meta.isSnapshot) {\n        $scope.tabs.push({title: '生成快照', src: 'shareSnapshot.html'});\n      }\n\n      $scope.buildUrl();\n    };\n\n    $scope.buildUrl = function() {\n      var baseUrl = $location.absUrl();\n      var queryStart = baseUrl.indexOf('?');\n\n      if (queryStart !== -1) {\n        baseUrl = baseUrl.substring(0, queryStart);\n      }\n\n      var params = angular.copy($location.search());\n      params.systemId = contextSrv.user.systemId;\n\n      var range = timeSrv.timeRange();\n      params.from = range.from.valueOf();\n      params.to = range.to.valueOf();\n\n      if ($scope.options.includeTemplateVars) {\n        templateSrv.fillVariableValuesForUrl(params);\n      }\n\n      if (!$scope.options.forCurrent) {\n        delete params.from;\n        delete params.to;\n      }\n\n      if ($scope.options.theme !== 'current') {\n        params.theme = $scope.options.theme;\n      }\n\n      if ($scope.modeSharePanel) {\n        params.panelId = $scope.panel.id;\n        params.fullscreen = true;\n      } else {\n        delete params.panelId;\n        delete params.fullscreen;\n      }\n\n      $scope.shareUrl = linkSrv.addParamsToUrl(baseUrl, params);\n\n      var soloUrl = $scope.shareUrl;\n      soloUrl = soloUrl.replace('/dashboard/', '/dashboard-solo/');\n      soloUrl = soloUrl.replace(\"&fullscreen\", \"\");\n\n      $scope.iframeHtml = '<iframe src=\"' + soloUrl + '\" width=\"450\" height=\"200\" frameborder=\"0\"></iframe>';\n\n      $scope.imageUrl = soloUrl.replace('/dashboard-solo/', '/render/dashboard-solo/');\n      $scope.imageUrl += '&width=1000';\n      $scope.imageUrl += '&height=500';\n    };\n\n  });\n\n  module.directive('clipboardButton',function() {\n    return function(scope, elem) {\n      require(['vendor/zero_clipboard'], function(ZeroClipboard) {\n        ZeroClipboard.config({\n          swfPath: config.appSubUrl + '/public/vendor/zero_clipboard.swf'\n        });\n        new ZeroClipboard(elem[0]);\n      });\n    };\n  });\n\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./public/app/features/dashboard/shareModalCtrl.js\n// module id = 1194\n// module chunks = 0","define([\n  'angular',\n  'lodash',\n],\nfunction (angular, _) {\n  'use strict';\n\n  var module = angular.module('grafana.controllers');\n\n  module.controller('ShareSnapshotCtrl', function($scope, $rootScope, $location, backendSrv, $timeout, timeSrv) {\n\n    $scope.snapshot = {\n      name: $scope.dashboard.title,\n      expires: 0,\n    };\n\n    $scope.step = 1;\n\n    $scope.expireOptions = [\n      {text: '1 小时', value: 60*60},\n      {text: '1 天',  value: 60*60*24},\n      {text: '7 天', value: 60*60*24*7},\n      {text: '永久',  value: 0},\n    ];\n\n    $scope.accessOptions = [\n      {text: '任何获取到链接的用户', value: 1},\n      {text: '公司用户',  value: 2},\n      {text: '公开发布', value: 3},\n    ];\n\n    $scope.init = function() {\n      backendSrv.get('/api/snapshot/shared-options').then(function(options) {\n        $scope.externalUrl = options['externalSnapshotURL'];\n        $scope.sharingButtonText = options['externalSnapshotName'];\n        $scope.externalEnabled = options['externalEnabled'];\n      });\n    };\n\n    $scope.apiUrl = '/api/snapshots';\n\n    $scope.createSnapshot = function(external) {\n      $scope.dashboard.snapshot = {\n        timestamp: new Date()\n      };\n\n      $scope.loading = true;\n      $scope.snapshot.external = external;\n\n      $rootScope.$broadcast('refresh');\n\n      $timeout(function() {\n        $scope.saveSnapshot(external);\n      }, 4000);\n    };\n\n    $scope.saveSnapshot = function(external) {\n      var dash = $scope.dashboard.getSaveModelClone();\n      $scope.scrubDashboard(dash);\n\n      var cmdData = {\n        dashboard: dash,\n        name: dash.title,\n        expires: $scope.snapshot.expires,\n      };\n\n      var postUrl = external ? $scope.externalUrl + $scope.apiUrl : $scope.apiUrl;\n\n      backendSrv.post(postUrl, cmdData).then(function(results) {\n        $scope.loading = false;\n\n        if (external) {\n          $scope.deleteUrl = results.deleteUrl;\n          $scope.snapshotUrl = results.url;\n          $scope.saveExternalSnapshotRef(cmdData, results);\n        } else {\n          var url = $location.url();\n          var baseUrl = $location.absUrl();\n\n          if (url !== '/') {\n            baseUrl = baseUrl.replace(url, '') + '/';\n          }\n\n          $scope.snapshotUrl = baseUrl + 'dashboard/snapshot/' + results.key;\n          $scope.deleteUrl = baseUrl + 'api/snapshots-delete/' + results.deleteKey;\n        }\n\n        $scope.step = 2;\n      }, function() {\n        $scope.loading = false;\n      });\n    };\n\n    $scope.scrubDashboard = function(dash) {\n      // change title\n      dash.title = $scope.snapshot.name;\n      // make relative times absolute\n      dash.time = timeSrv.timeRange();\n      // remove panel queries & links\n      dash.forEachPanel(function(panel) {\n        panel.targets = [];\n        panel.links = [];\n        panel.datasource = null;\n      });\n      // remove annotation queries\n      dash.annotations.list = _.chain(dash.annotations.list)\n      .filter(function(annotation) {\n        return annotation.enable;\n      })\n      .map(function(annotation) {\n        return {\n          name: annotation.name,\n          enable: annotation.enable,\n          snapshotData: annotation.snapshotData\n        };\n      }).value();\n      // remove template queries\n      _.each(dash.templating.list, function(variable) {\n        variable.query = \"\";\n        variable.options = variable.current;\n        variable.refresh = false;\n      });\n\n      // snapshot single panel\n      if ($scope.modeSharePanel) {\n        var singlePanel = dash.getPanelById($scope.panel.id);\n        singlePanel.span = 12;\n        dash.rows = [{ height: '500px', span: 12, panels: [singlePanel] }];\n      }\n\n      // cleanup snapshotData\n      delete $scope.dashboard.snapshot;\n      $scope.dashboard.forEachPanel(function(panel) {\n        delete panel.snapshotData;\n      });\n      _.each($scope.dashboard.annotations.list, function(annotation) {\n        delete annotation.snapshotData;\n      });\n    };\n\n    $scope.deleteSnapshot = function() {\n      backendSrv.get($scope.deleteUrl).then(function() {\n        $scope.step = 3;\n      });\n    };\n\n    $scope.saveExternalSnapshotRef = function(cmdData, results) {\n      // save external in local instance as well\n      cmdData.external = true;\n      cmdData.key = results.key;\n      cmdData.deleteKey = results.deleteKey;\n      backendSrv.post('/api/snapshots/', cmdData);\n    };\n\n  });\n\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./public/app/features/dashboard/shareSnapshotCtrl.js\n// module id = 1196\n// module chunks = 0","define([\n  'angular',\n  'jquery',\n  'lodash',\n  'moment',\n],\nfunction (angular, $, _, moment) {\n  'use strict';\n\n  var module = angular.module('grafana.services');\n\n  module.factory('dashboardSrv', function(contextSrv, alertSrv)  {\n\n    function DashboardModel (data, meta) {\n      if (!data) {\n        data = {};\n      }\n\n      if (!data.id && data.version) {\n        data.schemaVersion = data.version;\n      }\n\n      this.id = data.id || null;\n      this.title = data.title || 'No Title';\n      this.system = data.system || null;\n      this.manualAnnotation = data.manualAnnotation || null;\n      this.originalTitle = this.title;\n      this.tags = data.tags || [];\n      this.style = data.style || \"dark\";\n      this.timezone = data.timezone || '';\n      this.editable = data.editable !== false;\n      this.hideControls = data.hideControls || false;\n      this.sharedCrosshair = data.sharedCrosshair || false;\n      this.rows = data.rows || [];\n      this.time = data.time || { from: 'now-6h', to: 'now' };\n      this.timepicker = data.timepicker || {};\n      this.templating = this._ensureListExist(data.templating);\n      this.annotations = this._ensureListExist(data.annotations);\n      this.refresh = data.refresh;\n      this.snapshot = data.snapshot;\n      this.schemaVersion = data.schemaVersion || 0;\n      this.version = data.version || 0;\n      this.links = data.links || [];\n      this._updateSchema(data);\n      this._initMeta(meta);\n    }\n\n    var p = DashboardModel.prototype;\n\n    p._initMeta = function(meta) {\n      meta = meta || {};\n\n      meta.canShare = meta.canShare !== false;\n      meta.canSave = meta.canSave !== false;\n      meta.canStar = meta.canStar !== false;\n      meta.canEdit = meta.canEdit !== false;\n\n      if (!this.editable) {\n        meta.canEdit = false;\n        meta.canDelete = false;\n        meta.canSave = false;\n        this.hideControls = true;\n      }\n\n      this.meta = meta;\n    };\n\n    // cleans meta data and other non peristent state\n    p.getSaveModelClone = function() {\n      var copy = angular.copy(this);\n      delete copy.meta;\n      return copy;\n    };\n\n    p._ensureListExist = function (data) {\n      if (!data) { data = {}; }\n      if (!data.list) { data.list = []; }\n      return data;\n    };\n\n    p.getNextPanelId = function() {\n      var i, j, row, panel, max = 0;\n      for (i = 0; i < this.rows.length; i++) {\n        row = this.rows[i];\n        for (j = 0; j < row.panels.length; j++) {\n          panel = row.panels[j];\n          if (panel.id > max) { max = panel.id; }\n        }\n      }\n      return max + 1;\n    };\n\n    p.forEachPanel = function(callback) {\n      var i, j, row;\n      for (i = 0; i < this.rows.length; i++) {\n        row = this.rows[i];\n        for (j = 0; j < row.panels.length; j++) {\n          callback(row.panels[j], j, row, i);\n        }\n      }\n    };\n\n    p.getPanelById = function(id) {\n      for (var i = 0; i < this.rows.length; i++) {\n        var row = this.rows[i];\n        for (var j = 0; j < row.panels.length; j++) {\n          var panel = row.panels[j];\n          if (panel.id === id) {\n            return panel;\n          }\n        }\n      }\n      return null;\n    };\n\n    p.rowSpan = function(row) {\n      return _.reduce(row.panels, function(p,v) {\n        return p + v.span;\n      },0);\n    };\n\n    p.addPanel = function(panel, row) {\n      var rowSpan = this.rowSpan(row);\n      var panelCount = row.panels.length;\n      var space = (12 - rowSpan) - panel.span;\n      panel.id = this.getNextPanelId();\n\n      // try to make room of there is no space left\n      if (space <= 0) {\n        if (panelCount === 1) {\n          row.panels[0].span = 6;\n          panel.span = 6;\n        }\n        else if (panelCount === 2) {\n          row.panels[0].span = 4;\n          row.panels[1].span = 4;\n          panel.span = 4;\n        }\n      }\n\n      row.panels.push(panel);\n    };\n\n    p.isSubmenuFeaturesEnabled = function() {\n      var visableTemplates = _.filter(this.templating.list, function(template) {\n        return template.hideVariable === undefined || template.hideVariable === false;\n      });\n\n      return visableTemplates.length > 0 || this.annotations.list.length > 0 || this.links.length > 0;\n    };\n\n    p.getPanelInfoById = function(panelId) {\n      var result = {};\n      _.each(this.rows, function(row) {\n        _.each(row.panels, function(panel, index) {\n          if (panel.id === panelId) {\n            result.panel = panel;\n            result.row = row;\n            result.index = index;\n          }\n        });\n      });\n\n      if (!result.panel) {\n        return null;\n      }\n\n      return result;\n    };\n\n    p.duplicatePanel = function(panel, row) {\n      var rowIndex = _.indexOf(this.rows, row);\n      var newPanel = angular.copy(panel);\n      newPanel.id = this.getNextPanelId();\n\n      delete newPanel.repeat;\n      delete newPanel.repeatIteration;\n      delete newPanel.repeatPanelId;\n      delete newPanel.scopedVars;\n\n      var currentRow = this.rows[rowIndex];\n      currentRow.panels.push(newPanel);\n      return newPanel;\n    };\n\n    p.formatDate = function(date, format) {\n      date = moment.isMoment(date) ? date : moment(date);\n      format = format || 'YYYY-MM-DD HH:mm:ss';\n      this.timezone = this.getTimezone();\n\n      return this.timezone === 'browser' ?\n        moment(date).format(format) :\n        moment.utc(date).format(format);\n    };\n\n    p.getRelativeTime = function(date) {\n      date = moment.isMoment(date) ? date : moment(date);\n\n      return this.timezone === 'browser' ?\n        moment(date).fromNow() :\n        moment.utc(date).fromNow();\n    };\n\n    p.getNextQueryLetter = function(panel) {\n      var letters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n\n      return _.find(letters, function(refId) {\n        return _.every(panel.targets, function(other) {\n          return other.refId !== refId;\n        });\n      });\n    };\n\n    p.isTimezoneUtc = function() {\n      return this.getTimezone() === 'utc';\n    };\n\n    p.getTimezone = function() {\n      return this.timezone ? this.timezone : contextSrv.user.timezone;\n    };\n\n    p._updateSchema = function(old) {\n      var i, j, k;\n      var oldVersion = this.schemaVersion;\n      var panelUpgrades = [];\n      this.schemaVersion = 12;\n\n      if (oldVersion === this.schemaVersion) {\n        return;\n      }\n\n      // version 2 schema changes\n      if (oldVersion < 2) {\n\n        if (old.services) {\n          if (old.services.filter) {\n            this.time = old.services.filter.time;\n            this.templating.list = old.services.filter.list || [];\n          }\n          delete this.services;\n        }\n\n        panelUpgrades.push(function(panel) {\n          // rename panel type\n          if (panel.type === 'graphite') {\n            panel.type = 'graph';\n          }\n\n          if (panel.type !== 'graph') {\n            return;\n          }\n\n          if (_.isBoolean(panel.legend)) { panel.legend = { show: panel.legend }; }\n\n          if (panel.grid) {\n            if (panel.grid.min) {\n              panel.grid.leftMin = panel.grid.min;\n              delete panel.grid.min;\n            }\n\n            if (panel.grid.max) {\n              panel.grid.leftMax = panel.grid.max;\n              delete panel.grid.max;\n            }\n          }\n\n          if (panel.y_format) {\n            panel.y_formats[0] = panel.y_format;\n            delete panel.y_format;\n          }\n\n          if (panel.y2_format) {\n            panel.y_formats[1] = panel.y2_format;\n            delete panel.y2_format;\n          }\n        });\n      }\n\n      // schema version 3 changes\n      if (oldVersion < 3) {\n        // ensure panel ids\n        var maxId = this.getNextPanelId();\n        panelUpgrades.push(function(panel) {\n          if (!panel.id) {\n            panel.id = maxId;\n            maxId += 1;\n          }\n        });\n      }\n\n      // schema version 4 changes\n      if (oldVersion < 4) {\n        // move aliasYAxis changes\n        panelUpgrades.push(function(panel) {\n          if (panel.type !== 'graph') { return; }\n          _.each(panel.aliasYAxis, function(value, key) {\n            panel.seriesOverrides = [{ alias: key, yaxis: value }];\n          });\n          delete panel.aliasYAxis;\n        });\n      }\n\n      if (oldVersion < 6) {\n        // move pulldowns to new schema\n        var annotations = _.findWhere(old.pulldowns, { type: 'annotations' });\n\n        if (annotations) {\n          this.annotations = {\n            list: annotations.annotations || [],\n          };\n        }\n\n        // update template variables\n        for (i = 0 ; i < this.templating.list.length; i++) {\n          var variable = this.templating.list[i];\n          if (variable.datasource === void 0) { variable.datasource = null; }\n          if (variable.type === 'filter') { variable.type = 'query'; }\n          if (variable.type === void 0) { variable.type = 'query'; }\n          if (variable.allFormat === void 0) { variable.allFormat = 'glob'; }\n        }\n      }\n\n      if (oldVersion < 7) {\n        if (old.nav && old.nav.length) {\n          this.timepicker = old.nav[0];\n          delete this.nav;\n        }\n\n        // ensure query refIds\n        panelUpgrades.push(function(panel) {\n          _.each(panel.targets, function(target) {\n            if (!target.refId) {\n              target.refId = p.getNextQueryLetter(panel);\n            }\n          }, this);\n        });\n      }\n\n      if (oldVersion < 8) {\n        panelUpgrades.push(function(panel) {\n          _.each(panel.targets, function(target) {\n            // update old influxdb query schema\n            if (target.fields && target.tags && target.groupBy) {\n              if (target.rawQuery) {\n                delete target.fields;\n                delete target.fill;\n              } else {\n                target.select = _.map(target.fields, function(field) {\n                  var parts = [];\n                  parts.push({type: 'field', params: [field.name]});\n                  parts.push({type: field.func, params: []});\n                  if (field.mathExpr) {\n                    parts.push({type: 'math', params: [field.mathExpr]});\n                  }\n                  if (field.asExpr) {\n                    parts.push({type: 'alias', params: [field.asExpr]});\n                  }\n                  return parts;\n                });\n                delete target.fields;\n                _.each(target.groupBy, function(part) {\n                  if (part.type === 'time' && part.interval)  {\n                    part.params = [part.interval];\n                    delete part.interval;\n                  }\n                  if (part.type === 'tag' && part.key) {\n                    part.params = [part.key];\n                    delete part.key;\n                  }\n                });\n\n                if (target.fill) {\n                  target.groupBy.push({type: 'fill', params: [target.fill]});\n                  delete target.fill;\n                }\n              }\n            }\n          });\n        });\n      }\n\n      // schema version 9 changes\n      if (oldVersion < 9) {\n        // move aliasYAxis changes\n        panelUpgrades.push(function(panel) {\n          if (panel.type !== 'singlestat' && panel.thresholds !== \"\") { return; }\n\n          if (panel.thresholds) {\n            var k = panel.thresholds.split(\",\");\n\n            if (k.length >= 3) {\n              k.shift();\n              panel.thresholds = k.join(\",\");\n            }\n          }\n        });\n      }\n\n      // schema version 10 changes\n      if (oldVersion < 10) {\n        // move aliasYAxis changes\n        panelUpgrades.push(function(panel) {\n          if (panel.type !== 'table') { return; }\n\n          _.each(panel.styles, function(style) {\n            if (style.thresholds && style.thresholds.length >= 3) {\n              var k = style.thresholds;\n              k.shift();\n              style.thresholds = k;\n            }\n          });\n        });\n      }\n\n      if (oldVersion < 12) {\n        // update template variables\n        _.each(this.templating.list, function(templateVariable) {\n          if (templateVariable.refresh) { templateVariable.refresh = 1; }\n          if (!templateVariable.refresh) { templateVariable.refresh = 0; }\n          if (templateVariable.hideVariable) {\n            templateVariable.hide = 2;\n          } else if (templateVariable.hideLabel) {\n            templateVariable.hide = 1;\n          } else {\n            templateVariable.hide = 0;\n          }\n        });\n      }\n\n      if (oldVersion < 12) {\n        // update graph yaxes changes\n        panelUpgrades.push(function(panel) {\n          if (panel.type !== 'graph') { return; }\n          if (!panel.grid) { return; }\n\n          if (!panel.yaxes) {\n            panel.yaxes = [\n              {\n                show: panel['y-axis'],\n                min: panel.grid.leftMin,\n                max: panel.grid.leftMax,\n                logBase: panel.grid.leftLogBase,\n                format: panel.y_formats[0],\n                label: panel.leftYAxisLabel,\n              },\n              {\n                show: panel['y-axis'],\n                min: panel.grid.rightMin,\n                max: panel.grid.rightMax,\n                logBase: panel.grid.rightLogBase,\n                format: panel.y_formats[1],\n                label: panel.rightYAxisLabel,\n              }\n            ];\n\n            panel.xaxis = {\n              show: panel['x-axis'],\n            };\n\n            delete panel.grid.leftMin;\n            delete panel.grid.leftMax;\n            delete panel.grid.leftLogBase;\n            delete panel.grid.rightMin;\n            delete panel.grid.rightMax;\n            delete panel.grid.rightLogBase;\n            delete panel.y_formats;\n            delete panel.leftYAxisLabel;\n            delete panel.rightYAxisLabel;\n            delete panel['y-axis'];\n            delete panel['x-axis'];\n          }\n        });\n      }\n\n      if (panelUpgrades.length === 0) {\n        return;\n      }\n\n      for (i = 0; i < this.rows.length; i++) {\n        var row = this.rows[i];\n        for (j = 0; j < row.panels.length; j++) {\n          for (k = 0; k < panelUpgrades.length; k++) {\n            panelUpgrades[k].call(this, row.panels[j]);\n          }\n        }\n      }\n    };\n\n    return {\n      create: function(dashboard, meta) {\n        return new DashboardModel(dashboard, meta);\n      },\n      setCurrent: function(dashboard) {\n        this.currentDashboard = dashboard;\n      },\n      getCurrent: function() {\n        return this.currentDashboard;\n      },\n    };\n  });\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./public/app/features/dashboard/dashboardSrv.js\n// module id = 1197\n// module chunks = 0","define([\n  'angular',\n  'moment',\n  'lodash',\n  'jquery',\n  'app/core/utils/kbn',\n  'app/core/utils/datemath',\n  './impression_store',\n  'app/core/config',\n],\nfunction (angular, moment, _, $, kbn, dateMath, impressionStore) {\n  'use strict';\n\n  kbn = kbn.default;\n\n  var module = angular.module('grafana.services');\n\n  module.service('dashboardLoaderSrv', function(backendSrv,\n                                                   dashboardSrv,\n                                                   datasourceSrv,\n                                                   $http, $q, $timeout,\n                                                   contextSrv, $routeParams,\n                                                   $rootScope) {\n    var self = this;\n\n    this._dashboardLoadFailed = function(title, snapshot) {\n      snapshot = snapshot || false;\n      return {\n        meta: { canStar: false, isSnapshot: snapshot, canDelete: false, canSave: false, canEdit: false, dashboardNotFound: true },\n        dashboard: {title: title }\n      };\n    };\n\n    this.loadDashboard = function(type, slug) {\n      var promise;\n\n      if (type === 'script') {\n        promise = this._loadScriptedDashboard(slug);\n      } else if (type === 'snapshot') {\n        contextSrv.toggleSideMenu();\n        promise = backendSrv.get('/api/snapshots/' + $routeParams.slug)\n          .catch(function() {\n            return self._dashboardLoadFailed(\"Snapshot not found\", true);\n          });\n      } else {\n        promise = backendSrv.getDashboard($routeParams.type, $routeParams.slug)\n          .catch(function() {\n            return self._dashboardLoadFailed(\"Not found\");\n          });\n      }\n\n      promise.then(function(result) {\n        if (result.meta.dashboardNotFound !== true) {\n          impressionStore.impressions.addDashboardImpression(result.dashboard.id);\n        }\n\n        return result;\n      });\n\n      return promise;\n    };\n\n    this._loadScriptedDashboard = function(file) {\n      var url = 'public/dashboards/'+file.replace(/\\.(?!js)/,\"/\") + '?' + new Date().getTime();\n\n      return $http({ url: url, method: \"GET\" })\n      .then(this._executeScript).then(function(result) {\n        return { meta: { fromScript: true, canDelete: false, canSave: false, canStar: false}, dashboard: result.data };\n      }, function(err) {\n        console.log('Script dashboard error '+ err);\n        $rootScope.appEvent('alert-error', [\"脚本错误\", \"请确保它存在并返回一个有效的仪表盘\"]);\n        return self._dashboardLoadFailed('Scripted dashboard');\n      });\n    };\n\n    this._executeScript = function(result) {\n      var services = {\n        dashboardSrv: dashboardSrv,\n        datasourceSrv: datasourceSrv,\n        $q: $q,\n      };\n\n      /*jshint -W054 */\n      var script_func = new Function('ARGS','kbn','dateMath','_','moment','window','document','$','jQuery', 'services', result.data);\n      var script_result = script_func($routeParams, kbn, dateMath, _ , moment, window, document, $, $, services);\n\n      // Handle async dashboard scripts\n      if (_.isFunction(script_result)) {\n        var deferred = $q.defer();\n        script_result(function(dashboard) {\n          $timeout(function() {\n            deferred.resolve({ data: dashboard });\n          });\n        });\n        return deferred.promise;\n      }\n\n      return { data: script_result };\n    };\n\n  });\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./public/app/features/dashboard/dashboardLoaderSrv.js\n// module id = 1198\n// module chunks = 0","define([\n  'angular',\n  'lodash',\n  'jquery',\n],\nfunction (angular, _, $) {\n  'use strict';\n\n  var module = angular.module('grafana.services');\n\n  module.factory('dashboardViewStateSrv', function($location, $timeout) {\n\n    // represents the transient view state\n    // like fullscreen panel & edit\n    function DashboardViewState($scope) {\n      var self = this;\n      self.state = {};\n      self.panelScopes = [];\n      self.$scope = $scope;\n      self.dashboard = $scope.dashboard;\n\n      $scope.exitFullscreen = function() {\n        if (self.state.fullscreen) {\n          self.update({ fullscreen: false });\n        }\n      };\n\n      $scope.onAppEvent('$routeUpdate', function() {\n        var urlState = self.getQueryStringState();\n        if (self.needsSync(urlState)) {\n          self.update(urlState, true);\n        }\n      });\n\n      $scope.onAppEvent('panel-change-view', function(evt, payload) {\n        self.update(payload);\n      });\n\n      $scope.onAppEvent('panel-initialized', function(evt, payload) {\n        self.registerPanel(payload.scope);\n      });\n\n      this.update(this.getQueryStringState(), true);\n      this.expandRowForPanel();\n    }\n\n    DashboardViewState.prototype.expandRowForPanel = function() {\n      if (!this.state.panelId) { return; }\n\n      var panelInfo = this.$scope.dashboard.getPanelInfoById(this.state.panelId);\n      if (panelInfo) {\n        panelInfo.row.collapse = false;\n      }\n    };\n\n    DashboardViewState.prototype.needsSync = function(urlState) {\n      return _.isEqual(this.state, urlState) === false;\n    };\n\n    DashboardViewState.prototype.getQueryStringState = function() {\n      var state = $location.search();\n      state.panelId = parseInt(state.panelId) || null;\n      state.fullscreen = state.fullscreen ? true : null;\n      state.edit =  (state.edit === \"true\" || state.edit === true) || null;\n      state.editview = state.editview || null;\n      return state;\n    };\n\n    DashboardViewState.prototype.serializeToUrl = function() {\n      var urlState = _.clone(this.state);\n      urlState.fullscreen = this.state.fullscreen ? true : null;\n      urlState.edit = this.state.edit ? true : null;\n      return urlState;\n    };\n\n    DashboardViewState.prototype.update = function(state, skipUrlSync) {\n      _.extend(this.state, state);\n      this.dashboard.meta.fullscreen = this.state.fullscreen;\n\n      if (!this.state.fullscreen) {\n        this.state.panelId = null;\n        this.state.fullscreen = null;\n        this.state.edit = null;\n      }\n\n      if (!skipUrlSync) {\n        $location.search(this.serializeToUrl());\n      }\n\n      this.syncState();\n    };\n\n    DashboardViewState.prototype.syncState = function() {\n      if (this.panelScopes.length === 0) { return; }\n\n      if (this.dashboard.meta.fullscreen) {\n        if (this.fullscreenPanel) {\n          this.leaveFullscreen(false);\n        }\n        var panelScope = this.getPanelScope(this.state.panelId);\n        // panel could be about to be created/added and scope does\n        // not exist yet\n        if (!panelScope) {\n          return;\n        }\n\n        if (!panelScope.ctrl.editModeInitiated) {\n          panelScope.ctrl.initEditMode();\n        }\n\n        this.enterFullscreen(panelScope);\n        return;\n      }\n\n      if (this.fullscreenPanel) {\n        this.leaveFullscreen(true);\n      }\n    };\n\n    DashboardViewState.prototype.getPanelScope = function(id) {\n      return _.find(this.panelScopes, function(panelScope) {\n        return panelScope.ctrl.panel.id === id;\n      });\n    };\n\n    DashboardViewState.prototype.leaveFullscreen = function(render) {\n      var self = this;\n      var ctrl = self.fullscreenPanel.ctrl;\n\n      ctrl.editMode = false;\n      ctrl.fullscreen = false;\n\n      this.$scope.appEvent('panel-fullscreen-exit', {panelId: ctrl.panel.id});\n\n      if (!render) { return false;}\n\n      $timeout(function() {\n        if (self.oldTimeRange !== ctrl.range) {\n          self.$scope.broadcastRefresh();\n        }\n        else {\n          ctrl.render();\n        }\n        delete self.fullscreenPanel;\n      });\n    };\n\n    DashboardViewState.prototype.enterFullscreen = function(panelScope) {\n      var ctrl = panelScope.ctrl;\n\n      ctrl.editMode = this.state.edit && this.$scope.dashboardMeta.canEdit;\n      ctrl.fullscreen = true;\n\n      this.oldTimeRange = ctrl.range;\n      this.fullscreenPanel = panelScope;\n\n      $(window).scrollTop(0);\n\n      this.$scope.appEvent('panel-fullscreen-enter', {panelId: ctrl.panel.id});\n\n      $timeout(function() {\n        ctrl.render();\n      });\n    };\n\n    DashboardViewState.prototype.registerPanel = function(panelScope) {\n      var self = this;\n      self.panelScopes.push(panelScope);\n\n      if (self.state.panelId === panelScope.ctrl.panel.id) {\n        if (self.state.edit) {\n          panelScope.ctrl.editPanel();\n        } else {\n          panelScope.ctrl.viewPanel();\n        }\n      }\n\n      panelScope.$on('$destroy', function() {\n        self.panelScopes = _.without(self.panelScopes, panelScope);\n      });\n    };\n\n    return {\n      create: function($scope) {\n        return new DashboardViewState($scope);\n      }\n    };\n\n  });\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./public/app/features/dashboard/viewStateSrv.js\n// module id = 1199\n// module chunks = 0","define([\n  'angular',\n  'lodash',\n  'moment',\n  'app/core/config',\n  'app/core/utils/kbn',\n  'app/core/utils/datemath'\n], function (angular, _, moment, config, kbn, dateMath) {\n  'use strict';\n\n  kbn = kbn.default;\n\n  var module = angular.module('grafana.services');\n\n  module.service('timeSrv', function($rootScope, $timeout, $routeParams, timer) {\n    var self = this;\n\n    this.init = function(dashboard) {\n      timer.cancel_all();\n\n      this.dashboard = dashboard;\n      this.time = dashboard.time;\n\n      this._initTimeFromUrl();\n      this._parseTime();\n\n      if(this.dashboard.refresh) {\n        this.setAutoRefresh(this.dashboard.refresh);\n      }\n    };\n\n    this._parseTime = function() {\n      // when absolute time is saved in json it is turned to a string\n      if (_.isString(this.time.from) && this.time.from.indexOf('Z') >= 0) {\n        this.time.from = moment(this.time.from).utc();\n      }\n      if (_.isString(this.time.to) && this.time.to.indexOf('Z') >= 0) {\n        this.time.to = moment(this.time.to).utc();\n      }\n    };\n\n    this._parseUrlParam = function(value) {\n      if (value.indexOf('now') !== -1) {\n        return value;\n      }\n      if (value.length === 8) {\n        return moment.utc(value, 'YYYYMMDD');\n      }\n      if (value.length === 15) {\n        return moment.utc(value, 'YYYYMMDDTHHmmss');\n      }\n\n      if (!isNaN(value)) {\n        var epoch = parseInt(value);\n        return moment(epoch);\n      }\n\n      return null;\n    };\n\n    this._initTimeFromUrl = function() {\n      if ($routeParams.from) {\n        this.time.from = this._parseUrlParam($routeParams.from) || this.time.from;\n      }\n      if ($routeParams.to) {\n        this.time.to = this._parseUrlParam($routeParams.to) || this.time.to;\n      }\n    };\n\n    this.setAutoRefresh = function (interval) {\n      this.dashboard.refresh = interval;\n      if (interval) {\n        var _i = kbn.interval_to_ms(interval);\n        var wait_ms = _i - (Date.now() % _i);\n        $timeout(function () {\n          self.start_scheduled_refresh(_i);\n          self.refreshDashboard();\n        }, wait_ms);\n      } else {\n        this.cancel_scheduled_refresh();\n      }\n    };\n\n    this.refreshDashboard = function() {\n      $rootScope.$broadcast('refresh');\n    };\n\n    this.start_scheduled_refresh = function (after_ms) {\n      self.cancel_scheduled_refresh();\n      self.refresh_timer = timer.register($timeout(function () {\n        self.start_scheduled_refresh(after_ms);\n        self.refreshDashboard();\n      }, after_ms));\n    };\n\n    this.cancel_scheduled_refresh = function () {\n      timer.cancel(this.refresh_timer);\n    };\n\n    this.setTime = function(time, enableRefresh) {\n      _.extend(this.time, time);\n\n      // disable refresh if zoom in or zoom out\n      if (!enableRefresh && moment.isMoment(time.to)) {\n        this.old_refresh = this.dashboard.refresh || this.old_refresh;\n        this.setAutoRefresh(false);\n      }\n      else if (this.old_refresh && this.old_refresh !== this.dashboard.refresh) {\n        this.setAutoRefresh(this.old_refresh);\n        this.old_refresh = null;\n      }\n\n      $rootScope.appEvent('time-range-changed', this.time);\n      $timeout(this.refreshDashboard, 0);\n    };\n\n    this.timeRangeForUrl = function() {\n      var range = this.timeRange(false);\n      if (_.isString(range.to) && range.to.indexOf('now')) {\n        range = this.timeRange();\n      }\n\n      if (moment.isMoment(range.from)) { range.from = range.from.valueOf(); }\n      if (moment.isMoment(range.to)) { range.to = range.to.valueOf(); }\n\n      return range;\n    };\n\n    this.timeRange = function(parse) {\n      // make copies if they are moment  (do not want to return out internal moment, because they are mutable!)\n      var from = moment.isMoment(this.time.from) ? moment(this.time.from) : this.time.from ;\n      var to = moment.isMoment(this.time.to) ? moment(this.time.to) : this.time.to ;\n\n      if (parse !== false) {\n        from = dateMath.parse(from, false);\n        to = dateMath.parse(to, true);\n      }\n\n      var range = {\n        from: from,\n        to:   to\n      };\n\n      return {from: from, to: to, raw: range};\n    };\n\n  });\n\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./public/app/features/dashboard/timeSrv.js\n// module id = 1200\n// module chunks = 0","define([\n  'angular',\n  'lodash',\n],\nfunction(angular, _) {\n  'use strict';\n\n  var module = angular.module('grafana.services');\n\n  module.service('unsavedChangesSrv', function($rootScope, $q, $location, $timeout, contextSrv, $window) {\n\n    function Tracker(dashboard, scope) {\n      var self = this;\n\n      this.original = dashboard.getSaveModelClone();\n      this.current = dashboard;\n      this.originalPath = $location.path();\n      this.scope = scope;\n\n      // register events\n      scope.onAppEvent('dashboard-saved', function() {\n        self.original = self.current.getSaveModelClone();\n        self.originalPath = $location.path();\n      });\n\n      $window.onbeforeunload = function() {\n        if (self.ignoreChanges()) { return; }\n        if (self.hasChanges()) {\n          return \"您修改后的仪表盘尚未保存\";\n        }\n      };\n\n      scope.$on(\"$locationChangeStart\", function(event, next) {\n        // check if we should look for changes\n        if (self.originalPath === $location.path()) { return true; }\n        if (self.ignoreChanges()) { return true; }\n\n        if (self.hasChanges()) {\n          event.preventDefault();\n          self.next = next;\n\n          $timeout(function() {\n            self.open_modal();\n          });\n        }\n      });\n    }\n\n    var p = Tracker.prototype;\n\n    // for some dashboards and users\n    // changes should be ignored\n    p.ignoreChanges = function() {\n      if (!this.original) { return true; }\n      if (!contextSrv.isEditor) { return true; }\n      if (!this.current || !this.current.meta) { return true; }\n\n      var meta = this.current.meta;\n      return !meta.canSave || meta.fromScript || meta.fromFile;\n    };\n\n    // remove stuff that should not count in diff\n    p.cleanDashboardFromIgnoredChanges = function(dash) {\n      // ignore time and refresh\n      dash.time = 0;\n      dash.refresh = 0;\n      dash.schemaVersion = 0;\n\n      // filter row and panels properties that should be ignored\n      dash.rows = _.filter(dash.rows, function(row) {\n        if (row.repeatRowId) {\n          return false;\n        }\n\n        row.panels = _.filter(row.panels, function(panel) {\n          if (panel.repeatPanelId) {\n            return false;\n          }\n\n          // remove scopedVars\n          panel.scopedVars = null;\n\n          // ignore span changes\n          panel.span = null;\n\n          // ignore panel legend sort\n          if (panel.legend)  {\n            delete panel.legend.sort;\n            delete panel.legend.sortDesc;\n          }\n\n          return true;\n        });\n\n        // ignore collapse state\n        row.collapse = false;\n        return true;\n      });\n\n      // ignore template variable values\n      _.each(dash.templating.list, function(value) {\n        value.current = null;\n        value.options = null;\n      });\n    };\n\n    p.hasChanges = function() {\n      var current = this.current.getSaveModelClone();\n      var original = this.original;\n\n      this.cleanDashboardFromIgnoredChanges(current);\n      this.cleanDashboardFromIgnoredChanges(original);\n\n      var currentTimepicker = _.findWhere(current.nav, { type: 'timepicker' });\n      var originalTimepicker = _.findWhere(original.nav, { type: 'timepicker' });\n\n      if (currentTimepicker && originalTimepicker) {\n        currentTimepicker.now = originalTimepicker.now;\n      }\n\n      var currentJson = angular.toJson(current);\n      var originalJson = angular.toJson(original);\n\n      return currentJson !== originalJson;\n    };\n\n    p.open_modal = function() {\n      var tracker = this;\n\n      var modalScope = this.scope.$new();\n      modalScope.ignore = function() {\n        tracker.original = null;\n        tracker.goto_next();\n      };\n\n      modalScope.save = function() {\n        tracker.scope.$emit('save-dashboard');\n      };\n\n      $rootScope.appEvent('show-modal', {\n        src: 'public/app/partials/unsaved-changes.html',\n        modalClass: 'confirm-modal',\n        scope: modalScope,\n      });\n    };\n\n    p.goto_next = function() {\n      var baseLen = $location.absUrl().length - $location.url().length;\n      var nextUrl = this.next.substring(baseLen);\n      $location.url(nextUrl);\n    };\n\n    this.Tracker = Tracker;\n    this.init = function(dashboard, scope) {\n      // wait for different services to patch the dashboard (missing properties)\n      $timeout(function() { new Tracker(dashboard, scope); }, 1200);\n    };\n  });\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./public/app/features/dashboard/unsavedChangesSrv.js\n// module id = 1201\n// module chunks = 0","///<reference path=\"../../../headers/common.d.ts\" />\n\nimport _ from 'lodash';\nimport angular from 'angular';\nimport moment from 'moment';\n\nimport * as rangeUtil from 'app/core/utils/rangeutil';\n\nexport class TimePickerCtrl {\n\n  static tooltipFormat = 'MMM D, YYYY HH:mm:ss';\n  static defaults = {\n    time_options: ['5m', '15m', '1h', '6h', '12h', '24h', '2d', '7d', '30d'],\n    refresh_intervals: ['5s', '10s', '30s', '1m', '5m', '15m', '30m', '1h', '2h', '1d'],\n  };\n\n  dashboard: any;\n  panel: any;\n  absolute: any;\n  timeRaw: any;\n  tooltip: string;\n  rangeString: string;\n  timeOptions: any;\n  refresh: any;\n  isOpen: boolean;\n  isUtc: boolean;\n\n  /** @ngInject */\n  constructor(private $scope, private $rootScope, private timeSrv, private $translate) {\n    $scope.ctrl = this;\n\n    $rootScope.onAppEvent('zoom-out', () => this.zoom(2), $scope);\n    $rootScope.onAppEvent('shift-time-forward', () => this.move(1), $scope);\n    $rootScope.onAppEvent('shift-time-backward', () => this.move(-1), $scope);\n    $rootScope.onAppEvent('refresh', () => this.init(), $scope);\n    $rootScope.onAppEvent('dash-editor-hidden', () => this.isOpen = false, $scope);\n\n    this.init();\n  }\n\n  init() {\n    this.panel = this.dashboard.timepicker;\n\n    _.defaults(this.panel, TimePickerCtrl.defaults);\n\n    var time = angular.copy(this.timeSrv.timeRange());\n    var timeRaw = angular.copy(this.timeSrv.timeRange(false));\n\n    if (!this.dashboard.isTimezoneUtc()) {\n      time.from.local();\n      time.to.local();\n      if (moment.isMoment(timeRaw.from)) {\n        timeRaw.from.local();\n      }\n      if (moment.isMoment(timeRaw.to)) {\n        timeRaw.to.local();\n      }\n    } else {\n      this.isUtc = true;\n    }\n\n    this.rangeString = rangeUtil.describeTimeRange(timeRaw);\n    this.absolute = {fromJs: time.from.toDate(), toJs: time.to.toDate()};\n    this.tooltip = this.dashboard.formatDate(time.from) + ` ${this.$translate.i18n.i18n_to} `;\n    this.tooltip += this.dashboard.formatDate(time.to);\n\n    // do not update time raw when dropdown is open\n    // as auto refresh will reset the from/to input fields\n    if (!this.isOpen) {\n      this.timeRaw = timeRaw;\n    }\n  }\n\n  zoom(factor) {\n    var range = this.timeSrv.timeRange();\n\n    var timespan = (range.to.valueOf() - range.from.valueOf());\n    var center = range.to.valueOf() - timespan/2;\n\n    var to = (center + (timespan*factor)/2);\n    var from = (center - (timespan*factor)/2);\n\n    if (to > Date.now() && range.to <= Date.now()) {\n      var offset = to - Date.now();\n      from = from - offset;\n      to = Date.now();\n    }\n\n    this.timeSrv.setTime({from: moment.utc(from), to: moment.utc(to) });\n  }\n\n  move(direction) {\n    var range = this.timeSrv.timeRange();\n\n    var timespan = (range.to.valueOf() - range.from.valueOf()) / 2;\n    var to, from;\n    if (direction === -1) {\n      to = range.to.valueOf() - timespan;\n      from = range.from.valueOf() - timespan;\n    } else if (direction === 1) {\n      to = range.to.valueOf() + timespan;\n      from = range.from.valueOf() + timespan;\n      if (to > Date.now() && range.to < Date.now()) {\n        to = Date.now();\n        from = range.from.valueOf();\n      }\n    } else {\n      to = range.to.valueOf();\n      from = range.from.valueOf();\n    }\n\n    this.timeSrv.setTime({from: moment.utc(from), to: moment.utc(to) });\n\n  }\n\n  openDropdown() {\n    this.init();\n    this.isOpen = true;\n    this.timeOptions = rangeUtil.getRelativeTimesList(this.panel, this.rangeString);\n    this.refresh = {\n      value: this.dashboard.refresh,\n      options: _.map(this.panel.refresh_intervals, (interval: any) => {\n        return {text: interval, value: interval};\n      })\n    };\n\n    this.refresh.options.unshift({text: 'off'});\n\n    this.$rootScope.appEvent('show-dash-editor', {\n      src: 'public/app/features/dashboard/timepicker/dropdown.html',\n      scope: this.$scope,\n      cssClass: 'gf-timepicker-dropdown',\n    });\n  }\n\n  applyCustom() {\n    if (this.refresh.value !== this.dashboard.refresh) {\n      this.timeSrv.setAutoRefresh(this.refresh.value);\n    }\n\n    this.timeSrv.setTime(this.timeRaw, true);\n    this.$rootScope.appEvent('hide-dash-editor');\n  }\n\n  absoluteFromChanged() {\n    this.timeRaw.from = this.getAbsoluteMomentForTimezone(this.absolute.fromJs);\n  }\n\n  absoluteToChanged() {\n    this.timeRaw.to = this.getAbsoluteMomentForTimezone(this.absolute.toJs);\n  }\n\n  getAbsoluteMomentForTimezone(jsDate) {\n    return this.dashboard.isTimezoneUtc() ? moment(jsDate).utc() : moment(jsDate);\n  }\n\n  setRelativeFilter(timespan) {\n    var range = {from: timespan.from, to: timespan.to};\n\n    if (this.panel.nowDelay && range.to === 'now') {\n      range.to = 'now-' + this.panel.nowDelay;\n    }\n\n    this.timeSrv.setTime(range);\n    this.$rootScope.appEvent('hide-dash-editor');\n  }\n\n}\n\nexport function settingsDirective() {\n  return {\n    restrict: 'E',\n    templateUrl: 'public/app/features/dashboard/timepicker/settings.html',\n    controller: TimePickerCtrl,\n    bindToController: true,\n    controllerAs: 'ctrl',\n    scope: {\n      dashboard: \"=\"\n    }\n  };\n}\n\nexport function timePickerDirective() {\n  return {\n    restrict: 'E',\n    templateUrl: 'public/app/features/dashboard/timepicker/timepicker.html',\n    controller: TimePickerCtrl,\n    bindToController: true,\n    controllerAs: 'ctrl',\n    scope: {\n      dashboard: \"=\"\n    }\n  };\n}\n\n\nangular.module('grafana.directives').directive('gfTimePickerSettings', settingsDirective);\nangular.module('grafana.directives').directive('gfTimePicker', timePickerDirective);\n\nimport {inputDateDirective} from './input_date';\nangular.module(\"grafana.directives\").directive('inputDatetime', inputDateDirective);\n\n\n\n// WEBPACK FOOTER //\n// node_modules/tslint-loader??ref--0!./public/app/features/dashboard/timepicker/timepicker.ts","///<reference path=\"../../../headers/common.d.ts\" />\n\nimport moment from 'moment';\nimport * as dateMath from 'app/core/utils/datemath';\n\nexport function inputDateDirective() {\n  return {\n    restrict: 'A',\n    require: 'ngModel',\n    link: function ($scope, $elem, attrs, ngModel) {\n      var format = 'YYYY-MM-DD HH:mm:ss';\n\n      var fromUser = function (text) {\n        if (text.indexOf('now') !== -1) {\n          if (!dateMath.isValid(text)) {\n            ngModel.$setValidity(\"error\", false);\n            return undefined;\n          }\n          ngModel.$setValidity(\"error\", true);\n          return text;\n        }\n\n        var parsed;\n        if ($scope.ctrl.isUtc) {\n          parsed = moment.utc(text, format);\n        } else {\n          parsed = moment(text, format);\n        }\n\n        if (!parsed.isValid()) {\n          ngModel.$setValidity(\"error\", false);\n          return undefined;\n        }\n\n        ngModel.$setValidity(\"error\", true);\n        return parsed;\n      };\n\n      var toUser = function (currentValue) {\n        if (moment.isMoment(currentValue)) {\n          return currentValue.format(format);\n        } else {\n          return currentValue;\n        }\n      };\n\n      ngModel.$parsers.push(fromUser);\n      ngModel.$formatters.push(toUser);\n    }\n  };\n}\n\n\n\n\n// WEBPACK FOOTER //\n// node_modules/tslint-loader??ref--0!./public/app/features/dashboard/timepicker/input_date.ts","define([\n  'angular',\n  'lodash',\n  'app/core/utils/kbn'\n],\nfunction (angular, _, kbn) {\n  'use strict';\n\n  kbn = kbn.default;\n\n  var module = angular.module('grafana.controllers');\n\n  module.controller('GraphiteImportCtrl', function($scope, datasourceSrv, dashboardSrv, $location) {\n    $scope.options = {};\n\n    $scope.init = function() {\n      $scope.datasources = [];\n      _.each(datasourceSrv.getAll(), function(ds) {\n        if (ds.type === 'graphite') {\n          $scope.options.sourceName = ds.name;\n          $scope.datasources.push(ds.name);\n        }\n      });\n    };\n\n    $scope.listAll = function() {\n      datasourceSrv.get($scope.options.sourceName).then(function(datasource) {\n        $scope.datasource = datasource;\n        $scope.datasource.listDashboards('').then(function(results) {\n          $scope.dashboards = results;\n        }, function(err) {\n          var message = err.message || err.statusText || 'Error';\n          $scope.appEvent('alert-error', ['Failed to load dashboard list from graphite', message]);\n        });\n      });\n    };\n\n    $scope.import = function(dashName) {\n      $scope.datasource.loadDashboard(dashName).then(function(results) {\n        if (!results.data || !results.data.state) {\n          throw { message: 'no dashboard state received from graphite' };\n        }\n\n        graphiteToGrafanaTranslator(results.data.state, $scope.datasource.name);\n      }, function(err) {\n        var message = err.message || err.statusText || 'Error';\n        $scope.appEvent('alert-error', ['Failed to load dashboard from graphite', message]);\n      });\n    };\n\n    function graphiteToGrafanaTranslator(state, datasource) {\n      var graphsPerRow = 2;\n      var rowHeight = 300;\n      var rowTemplate;\n      var currentRow;\n      var panel;\n\n      rowTemplate = {\n        title: '',\n        panels: [],\n        height: rowHeight\n      };\n\n      currentRow = angular.copy(rowTemplate);\n\n      var newDashboard = dashboardSrv.create({});\n      newDashboard.rows = [];\n      newDashboard.title = state.name;\n      newDashboard.rows.push(currentRow);\n\n      _.each(state.graphs, function(graph, index) {\n        if (currentRow.panels.length === graphsPerRow) {\n          currentRow = angular.copy(rowTemplate);\n          newDashboard.rows.push(currentRow);\n        }\n\n        panel = {\n          type: 'graph',\n          span: 12 / graphsPerRow,\n          title: graph[1].title,\n          targets: [],\n          datasource: datasource,\n          id: index + 1\n        };\n\n        _.each(graph[1].target, function(target) {\n          panel.targets.push({ target: target });\n        });\n\n        currentRow.panels.push(panel);\n      });\n\n      window.grafanaImportDashboard = newDashboard;\n      $location.path('/dashboard-import/' + kbn.slugifyForUrl(newDashboard.title));\n    }\n  });\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./public/app/features/dashboard/graphiteImportCtrl.js\n// module id = 1204\n// module chunks = 0","define([\n  'angular',\n  'lodash',\n],\nfunction (angular, _) {\n  'use strict';\n\n  var module = angular.module('grafana.services');\n\n  module.service('dynamicDashboardSrv', function()  {\n    var self = this;\n\n    this.init = function(dashboard) {\n      if (dashboard.snapshot) { return; }\n\n      this.iteration = new Date().getTime();\n      this.process(dashboard);\n    };\n\n    this.update = function(dashboard) {\n      if (dashboard.snapshot) { return; }\n\n      this.iteration = this.iteration + 1;\n      this.process(dashboard);\n    };\n\n    this.process = function(dashboard) {\n      if (dashboard.templating.list.length === 0) { return; }\n      this.dashboard = dashboard;\n\n      var i, j, row, panel;\n      for (i = 0; i < this.dashboard.rows.length; i++) {\n        row = this.dashboard.rows[i];\n        // handle row repeats\n        if (row.repeat) {\n          this.repeatRow(row, i);\n        }\n        // clean up old left overs\n        else if (row.repeatRowId && row.repeatIteration !== this.iteration) {\n          this.dashboard.rows.splice(i, 1);\n          i = i - 1;\n          continue;\n        }\n\n        // repeat panels\n        for (j = 0; j < row.panels.length; j++) {\n          panel = row.panels[j];\n          if (panel.repeat) {\n            this.repeatPanel(panel, row);\n          }\n          // clean up old left overs\n          else if (panel.repeatPanelId && panel.repeatIteration !== this.iteration) {\n            row.panels = _.without(row.panels, panel);\n            j = j - 1;\n          } else if (!_.isEmpty(panel.scopedVars) && panel.repeatIteration !== this.iteration) {\n            panel.scopedVars = {};\n          }\n        }\n      }\n    };\n\n    // returns a new row clone or reuses a clone from previous iteration\n    this.getRowClone = function(sourceRow, repeatIndex, sourceRowIndex) {\n      if (repeatIndex === 0) {\n        return sourceRow;\n      }\n\n      var i, panel, row, copy;\n      var sourceRowId = sourceRowIndex + 1;\n\n      // look for row to reuse\n      for (i = 0; i < this.dashboard.rows.length; i++) {\n        row = this.dashboard.rows[i];\n        if (row.repeatRowId === sourceRowId && row.repeatIteration !== this.iteration) {\n          copy = row;\n          break;\n        }\n      }\n\n      if (!copy) {\n        copy = angular.copy(sourceRow);\n        this.dashboard.rows.splice(sourceRowIndex + repeatIndex, 0, copy);\n\n        // set new panel ids\n        for (i = 0; i < copy.panels.length; i++) {\n          panel = copy.panels[i];\n          panel.id = this.dashboard.getNextPanelId();\n        }\n      }\n\n      copy.repeat = null;\n      copy.repeatRowId = sourceRowId;\n      copy.repeatIteration = this.iteration;\n      return copy;\n    };\n\n    // returns a new row clone or reuses a clone from previous iteration\n    this.repeatRow = function(row, rowIndex) {\n      var variables = this.dashboard.templating.list;\n      var variable = _.findWhere(variables, {name: row.repeat});\n      if (!variable) {\n        return;\n      }\n\n      var selected, copy, i, panel;\n      if (variable.current.text === 'All') {\n        selected = variable.options.slice(1, variable.options.length);\n      } else {\n        selected = _.filter(variable.options, {selected: true});\n      }\n\n      _.each(selected, function(option, index) {\n        copy = self.getRowClone(row, index, rowIndex);\n        copy.scopedVars = {};\n        copy.scopedVars[variable.name] = option;\n\n        for (i = 0; i < copy.panels.length; i++) {\n          panel = copy.panels[i];\n          panel.scopedVars = {};\n          panel.scopedVars[variable.name] = option;\n          panel.repeatIteration = this.iteration;\n        }\n      }, this);\n    };\n\n    this.getPanelClone = function(sourcePanel, row, index) {\n      // if first clone return source\n      if (index === 0) {\n        return sourcePanel;\n      }\n\n      var i, tmpId, panel, clone;\n\n      // first try finding an existing clone to use\n      for (i = 0; i < row.panels.length; i++) {\n        panel = row.panels[i];\n        if (panel.repeatIteration !== this.iteration && panel.repeatPanelId === sourcePanel.id) {\n          clone = panel;\n          break;\n        }\n      }\n\n      if (!clone) {\n        clone = { id: this.dashboard.getNextPanelId() };\n        row.panels.push(clone);\n      }\n\n      // save id\n      tmpId = clone.id;\n      // copy properties from source\n      angular.copy(sourcePanel, clone);\n      // restore id\n      clone.id = tmpId;\n      clone.repeatIteration = this.iteration;\n      clone.repeatPanelId = sourcePanel.id;\n      clone.repeat = null;\n      return clone;\n    };\n\n    this.repeatPanel = function(panel, row) {\n      var variables = this.dashboard.templating.list;\n      var variable = _.findWhere(variables, {name: panel.repeat});\n      if (!variable) { return; }\n\n      var selected;\n      if (variable.current.text === 'All') {\n        selected = variable.options.slice(1, variable.options.length);\n      } else {\n        selected = _.filter(variable.options, {selected: true});\n      }\n\n      _.each(selected, function(option, index) {\n        var copy = self.getPanelClone(panel, row, index);\n        copy.span = Math.max(12 / selected.length, panel.minSpan);\n        copy.scopedVars = copy.scopedVars || {};\n        copy.scopedVars[variable.name] = option;\n      });\n    };\n\n  });\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./public/app/features/dashboard/dynamicDashboardSrv.js\n// module id = 1205\n// module chunks = 0","define([\n  'angular',\n  'lodash',\n],\nfunction (angular, _) {\n  'use strict';\n\n  var module = angular.module('grafana.controllers');\n\n  module.controller('DashboardImportCtrl', function($scope, backendSrv, datasourceSrv) {\n\n    $scope.init = function() {\n      $scope.datasources = [];\n      $scope.sourceName = 'grafana';\n      $scope.destName = 'grafana';\n      $scope.imported = [];\n      $scope.dashboards = [];\n      $scope.infoText = '';\n      $scope.importing = false;\n\n      _.each(datasourceSrv.getAll(), function(ds, key) {\n        if (ds.type === 'influxdb_08' || ds.type === 'elasticsearch') {\n          $scope.sourceName = key;\n          $scope.datasources.push(key);\n        }\n      });\n    };\n\n    $scope.startImport = function() {\n      datasourceSrv.get($scope.sourceName).then(function(ds) {\n        $scope.dashboardSource = ds;\n        $scope.dashboardSource.searchDashboards('title:').then(function(results) {\n          $scope.dashboards = results.dashboards;\n\n          if ($scope.dashboards.length === 0) {\n            $scope.infoText = 'No dashboards found';\n            return;\n          }\n\n          $scope.importing = true;\n          $scope.imported = [];\n          $scope.next();\n        }, function(err) {\n          var resp = err.message || err.statusText || 'Unknown error';\n          var message = \"Failed to load dashboards from selected data source, response from server was: \" + resp;\n          $scope.appEvent('alert-error', ['Import failed', message]);\n        });\n      });\n    };\n\n    $scope.next = function() {\n      if ($scope.dashboards.length === 0) {\n        $scope.infoText = \"Done! Imported \" + $scope.imported.length + \" dashboards\";\n      }\n\n      var dash = $scope.dashboards.shift();\n      if (!dash.title) {\n        console.log(dash);\n        return;\n      }\n\n      var infoObj = {name: dash.title, info: 'Importing...'};\n      $scope.imported.push(infoObj);\n      $scope.infoText = \"Importing \" + $scope.imported.length + '/' + ($scope.imported.length + $scope.dashboards.length);\n\n      $scope.dashboardSource.getDashboard(dash.id).then(function(loadedDash) {\n        backendSrv.saveDashboard(loadedDash).then(function() {\n          infoObj.info = \"Done!\";\n          $scope.next();\n        }, function(err) {\n          err.isHandled = true;\n          infoObj.info = \"Error: \" + (err.data || { message: 'Unknown' }).message;\n          $scope.next();\n        });\n      });\n    };\n\n    $scope.init();\n\n  });\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./public/app/features/dashboard/importCtrl.js\n// module id = 1206\n// module chunks = 0","define([\n  './playlists_ctrl',\n  './playlist_search',\n  './playlist_srv',\n  './playlist_edit_ctrl',\n  './playlist_routes'\n], function () {});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./public/app/features/playlist/all.js\n// module id = 1207\n// module chunks = 0","///<reference path=\"../../headers/common.d.ts\" />\n\nimport angular from 'angular';\nimport _ from 'lodash';\nimport coreModule from '../../core/core_module';\n\nexport class PlaylistsCtrl {\n  playlists: any;\n\n  /** @ngInject */\n  constructor(private $scope, private $location, private backendSrv) {\n    backendSrv.get('/api/playlists')\n      .then((result) => {\n        this.playlists = result;\n      });\n  }\n\n  removePlaylistConfirmed(playlist) {\n    _.remove(this.playlists, { id: playlist.id });\n\n    this.backendSrv.delete('/api/playlists/' + playlist.id)\n      .then(() => {\n        this.$scope.appEvent('alert-success', ['Playlist deleted', '']);\n      }, () => {\n        this.$scope.appEvent('alert-error', ['Unable to delete playlist', '']);\n        this.playlists.push(playlist);\n      });\n  }\n\n  removePlaylist(playlist) {\n\n    this.$scope.appEvent('confirm-modal', {\n      title: 'Delete',\n      text: 'Are you sure you want to delete playlist ' + playlist.name + '?',\n      yesText: \"Delete\",\n      icon: \"fa-trash\",\n      onConfirm: () => {\n        this.removePlaylistConfirmed(playlist);\n      }\n    });\n  }\n}\n\ncoreModule.controller('PlaylistsCtrl', PlaylistsCtrl);\n\n\n\n// WEBPACK FOOTER //\n// node_modules/tslint-loader??ref--0!./public/app/features/playlist/playlists_ctrl.ts","///<reference path=\"../../headers/common.d.ts\" />\n\nimport angular from 'angular';\nimport config from 'app/core/config';\nimport _ from 'lodash';\nimport $ from 'jquery';\nimport coreModule from '../../core/core_module';\n\nexport class PlaylistSearchCtrl {\n  query: any;\n  tagsMode: boolean;\n\n  searchStarted: any;\n\n  /** @ngInject */\n  constructor(private $scope, private $location, private $timeout, private backendSrv, private contextSrv) {\n    this.query = { query: '', tag: [], starred: false };\n\n    $timeout(() => {\n      this.query.query = '';\n      this.searchDashboards();\n    }, 100);\n  }\n\n  searchDashboards() {\n    this.tagsMode = false;\n    var prom: any = {};\n\n    prom.promise = this.backendSrv.search(this.query).then((result) => {\n      return {\n        dashboardResult: result,\n        tagResult: []\n      };\n    });\n\n    this.searchStarted(prom);\n  }\n\n  showStarred() {\n    this.query.starred = !this.query.starred;\n    this.searchDashboards();\n  }\n\n  queryHasNoFilters() {\n    return this.query.query === '' && this.query.starred === false && this.query.tag.length === 0;\n  }\n\n  filterByTag(tag, evt) {\n    this.query.tag.push(tag);\n    this.searchDashboards();\n    if (evt) {\n      evt.stopPropagation();\n      evt.preventDefault();\n    }\n  }\n\n  getTags() {\n    var prom: any = {};\n    prom.promise = this.backendSrv.get('/api/dashboards/tags').then((result) => {\n      return {\n        dashboardResult: [],\n        tagResult: result\n      };\n    });\n\n    this.searchStarted(prom);\n  }\n}\n\nexport function playlistSearchDirective() {\n  return {\n    restrict: 'E',\n    templateUrl: 'public/app/features/playlist/partials/playlist_search.html',\n    controller: PlaylistSearchCtrl,\n    bindToController: true,\n    controllerAs: 'ctrl',\n    scope: {\n      searchStarted: '&'\n    },\n  };\n}\n\ncoreModule.directive('playlistSearch', playlistSearchDirective);\n\n\n\n// WEBPACK FOOTER //\n// node_modules/tslint-loader??ref--0!./public/app/features/playlist/playlist_search.ts","///<reference path=\"../../headers/common.d.ts\" />\n\nimport angular from 'angular';\nimport config from 'app/core/config';\nimport coreModule from '../../core/core_module';\nimport kbn from 'app/core/utils/kbn';\n\nclass PlaylistSrv {\n  private cancelPromise: any;\n  private dashboards: any;\n  private index: number;\n  private interval: any;\n  private playlistId: number;\n\n  /** @ngInject */\n  constructor(private $rootScope: any, private $location: any, private $timeout: any, private backendSrv: any) { }\n\n  next() {\n    this.$timeout.cancel(this.cancelPromise);\n\n    var playedAllDashboards = this.index > this.dashboards.length - 1;\n\n    if (playedAllDashboards) {\n      window.location.href = `${config.appSubUrl}/playlists/play/${this.playlistId}`;\n    } else {\n      var dash = this.dashboards[this.index];\n      this.$location.url('dashboard/' + dash.uri);\n\n      this.index++;\n      this.cancelPromise = this.$timeout(() => this.next(), this.interval);\n    }\n  }\n\n  prev() {\n    this.index = Math.max(this.index - 2, 0);\n    this.next();\n  }\n\n  start(playlistId) {\n    this.stop();\n\n    this.index = 0;\n    this.playlistId = playlistId;\n    this.$rootScope.playlistSrv = this;\n\n    this.backendSrv.get(`/api/playlists/${playlistId}`).then(playlist => {\n      this.backendSrv.get(`/api/playlists/${playlistId}/dashboards`).then(dashboards => {\n        this.dashboards = dashboards;\n        this.interval = kbn.interval_to_ms(playlist.interval);\n        this.next();\n      });\n    });\n  }\n\n  stop() {\n    this.index = 0;\n    this.playlistId = 0;\n\n    if (this.cancelPromise) {\n      this.$timeout.cancel(this.cancelPromise);\n    }\n\n    this.$rootScope.playlistSrv = null;\n  }\n}\n\ncoreModule.service('playlistSrv', PlaylistSrv);\n\n\n\n// WEBPACK FOOTER //\n// node_modules/tslint-loader??ref--0!./public/app/features/playlist/playlist_srv.ts","  define([\n  'angular',\n  'app/core/config',\n  'lodash'\n],\nfunction (angular) {\n  'use strict';\n\n  var module = angular.module('grafana.routes');\n\n  module.config(function($routeProvider) {\n    $routeProvider\n      .when('/playlists', {\n        templateUrl: 'public/app/features/playlist/partials/playlists.html',\n        controllerAs: 'ctrl',\n        controller : 'PlaylistsCtrl'\n      })\n      .when('/playlists/create', {\n        templateUrl: 'public/app/features/playlist/partials/playlist.html',\n        controllerAs: 'ctrl',\n        controller : 'PlaylistEditCtrl'\n      })\n      .when('/playlists/edit/:id', {\n        templateUrl: 'public/app/features/playlist/partials/playlist.html',\n        controllerAs: 'ctrl',\n        controller : 'PlaylistEditCtrl'\n      })\n      .when('/playlists/play/:id', {\n        templateUrl: 'public/app/features/playlist/partials/playlists.html',\n        controllerAs: 'ctrl',\n        controller : 'PlaylistsCtrl',\n        resolve: {\n          init: function(playlistSrv, $route) {\n            var playlistId = $route.current.params.id;\n            playlistSrv.start(playlistId);\n          }\n        }\n      });\n  });\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./public/app/features/playlist/playlist_routes.js\n// module id = 1212\n// module chunks = 0","import './snapshot_ctrl';\n\n\n\n// WEBPACK FOOTER //\n// node_modules/tslint-loader??ref--0!./public/app/features/snapshot/all.ts","///<reference path=\"../../headers/common.d.ts\" />\n\nimport angular from 'angular';\nimport _ from 'lodash';\n\nexport class SnapshotsCtrl {\n\n  snapshots: any;\n\n  /** @ngInject */\n  constructor(private $rootScope, private backendSrv) {\n    this.backendSrv.get('/api/dashboard/snapshots').then(result => {\n      this.snapshots = result;\n    });\n  }\n\n  removeSnapshotConfirmed(snapshot) {\n    _.remove(this.snapshots, {key: snapshot.key});\n    this.backendSrv.get('/api/snapshots-delete/' + snapshot.deleteKey)\n    .then(() => {\n      this.$rootScope.appEvent('alert-success', ['Snapshot deleted', '']);\n    }, () => {\n      this.$rootScope.appEvent('alert-error', ['Unable to delete snapshot', '']);\n      this.snapshots.push(snapshot);\n    });\n  }\n\n  removeSnapshot(snapshot) {\n    this.$rootScope.appEvent('confirm-modal', {\n      title: 'Delete',\n      text: 'Are you sure you want to delete snapshot ' + snapshot.name + '?',\n      yesText: \"Delete\",\n      icon: \"fa-trash\",\n      onConfirm: () => {\n        this.removeSnapshotConfirmed(snapshot);\n      }\n    });\n  }\n\n}\n\nangular.module('grafana.controllers').controller('SnapshotsCtrl', SnapshotsCtrl);\n\n\n\n// WEBPACK FOOTER //\n// node_modules/tslint-loader??ref--0!./public/app/features/snapshot/snapshot_ctrl.ts","define([\n  'angular',\n  'lodash',\n],\nfunction (angular, _) {\n  'use strict';\n\n  var module = angular.module('grafana.directives');\n\n  var iconMap = {\n    \"external link\": \"fa-external-link\",\n    \"dashboard\": \"fa-th-large\",\n    \"question\": \"fa-question\",\n    \"info\": \"fa-info\",\n    \"bolt\": \"fa-bolt\",\n    \"doc\": \"fa-file-text-o\",\n    \"cloud\": \"fa-cloud\",\n  };\n\n  module.directive('dashLinksEditor', function() {\n    return {\n      restrict: 'E',\n      controller: 'DashLinkEditorCtrl',\n      templateUrl: 'public/app/features/dashlinks/editor.html',\n      link: function() {\n      }\n    };\n  });\n\n  module.directive('dashLinksContainer', function() {\n    return {\n      scope: {\n        links: \"=\"\n      },\n      restrict: 'E',\n      controller: 'DashLinksContainerCtrl',\n      template: '<dash-link ng-repeat=\"link in generatedLinks\" link=\"link\"></dash-link>',\n      link: function() { }\n    };\n  });\n\n  module.directive('dashLink', function($compile, linkSrv) {\n    return {\n      restrict: 'E',\n      link: function(scope, elem) {\n        var link = scope.link;\n        var template = '<div class=\"submenu-item dropdown\">' +\n          '<a class=\"pointer dash-nav-link\" data-placement=\"bottom\"' +\n          (link.asDropdown ? ' ng-click=\"fillDropdown(link)\" data-toggle=\"dropdown\"'  : \"\") + '>' +\n          '<i></i> <span></span></a>';\n\n        if (link.asDropdown) {\n          template += '<ul class=\"dropdown-menu\" role=\"menu\">' +\n            '<li ng-repeat=\"dash in link.searchHits\"><a href=\"{{dash.url}}\"><i class=\"fa fa-th-large\"></i> {{dash.title}}</a></li>' +\n            '</ul>';\n        }\n\n        elem.html(template);\n        $compile(elem.contents())(scope);\n\n        var anchor = elem.find('a');\n        var icon = elem.find('i');\n        var span = elem.find('span');\n\n        function update() {\n          var linkInfo = linkSrv.getAnchorInfo(link);\n          span.text(linkInfo.title);\n          anchor.attr(\"href\", linkInfo.href);\n        }\n\n        // tooltip\n        elem.find('a').tooltip({ title: scope.link.tooltip, html: true, container: 'body' });\n        icon.attr('class', 'fa fa-fw ' + scope.link.icon);\n        anchor.attr('target', scope.link.target);\n\n        // fix for menus on the far right\n        if (link.asDropdown && scope.$last) {\n          elem.find('.dropdown-menu').addClass('pull-right');\n        }\n\n        update();\n        scope.$on('refresh', update);\n      }\n    };\n  });\n\n  module.controller(\"DashLinksContainerCtrl\", function($scope, $rootScope, $q, backendSrv, dashboardSrv, linkSrv) {\n    var currentDashId = dashboardSrv.getCurrent().id;\n\n    function buildLinks(linkDef) {\n      if (linkDef.type === 'dashboards') {\n        if (!linkDef.tags) {\n          console.log('Dashboard link missing tag');\n          return $q.when([]);\n        }\n\n        if (linkDef.asDropdown) {\n          return $q.when([{\n            title: linkDef.title,\n            tags: linkDef.tags,\n            keepTime: linkDef.keepTime,\n            includeVars: linkDef.includeVars,\n            icon: \"fa fa-bars\",\n            asDropdown: true\n          }]);\n        }\n\n        return $scope.searchDashboards(linkDef, 7);\n      }\n\n      if (linkDef.type === 'link') {\n        return $q.when([{\n          url: linkDef.url,\n          title: linkDef.title,\n          icon: iconMap[linkDef.icon],\n          tooltip: linkDef.tooltip,\n          target: linkDef.targetBlank ? \"_blank\" : \"_self\",\n          keepTime: linkDef.keepTime,\n          includeVars: linkDef.includeVars,\n        }]);\n      }\n\n      return $q.when([]);\n    }\n\n    function updateDashLinks() {\n      var promises = _.map($scope.links, buildLinks);\n\n      $q.all(promises).then(function(results) {\n        $scope.generatedLinks = _.flatten(results);\n      });\n    }\n\n    $scope.searchDashboards = function(link, limit) {\n      return backendSrv.search({tag: link.tags, limit: limit}).then(function(results) {\n        return _.reduce(results, function(memo, dash) {\n          // do not add current dashboard\n          if (dash.id !== currentDashId) {\n            memo.push({\n              title: dash.title,\n              url: 'dashboard/' + dash.uri,\n              icon: 'fa fa-th-large',\n              keepTime: link.keepTime,\n              includeVars: link.includeVars\n            });\n          }\n          return memo;\n        }, []);\n      });\n    };\n\n    $scope.fillDropdown = function(link) {\n      $scope.searchDashboards(link, 100).then(function(results) {\n        _.each(results, function(hit) {\n          hit.url = linkSrv.getLinkUrl(hit);\n        });\n        link.searchHits = results;\n      });\n    };\n\n    updateDashLinks();\n    $rootScope.onAppEvent('dash-links-updated', updateDashLinks, $scope);\n  });\n\n  module.controller('DashLinkEditorCtrl', function($scope, $rootScope) {\n\n    $scope.iconMap = iconMap;\n    $scope.dashboard.links = $scope.dashboard.links || [];\n\n    $scope.addLink = function() {\n      $scope.dashboard.links.push({ type: 'dashboards', icon: 'external link' });\n      $scope.updateSubmenuVisibility();\n      $scope.updated();\n    };\n\n    $scope.moveLink = function(index, dir) {\n      _.move($scope.dashboard.links, index, index+dir);\n      $scope.updated();\n    };\n\n    $scope.updated = function() {\n      $rootScope.appEvent('dash-links-updated');\n    };\n\n    $scope.deleteLink = function(index) {\n      $scope.dashboard.links.splice(index, 1);\n      $scope.updateSubmenuVisibility();\n      $scope.updated();\n    };\n\n  });\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./public/app/features/dashlinks/module.js\n// module id = 1215\n// module chunks = 0","define([\n  './DecomposeMetricCtrl'\n], function () {});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./public/app/features/decompose/all.js\n// module id = 1216\n// module chunks = 0","define([\n    'angular',\n    'lodash'\n  ],\n  function (angular, _) {\n    'use strict';\n\n    var module = angular.module('grafana.controllers');\n\n    module.controller('DecomposeMetricCtrl', function ($scope, $timeout) {\n      $scope.init = function () {\n        $scope.initDashboard({\n          meta: {canStar: false, canShare: false, canEdit: true, canSave: false},\n          dashboard: {\n            title: \"健康管理\",\n            id: window.decomposeTarget.metric,\n            rows: [{\n              title: \"test for anmoly\",\n              panels: getDecomposeMetric(window.decomposeTarget),\n            }],\n            time: {from: \"now-1d\", to: \"now+5h\"}\n          }\n        }, $scope);\n\n        $timeout(function () {\n          $scope.$broadcast('render');\n        });\n      };\n\n      function getDecomposeMetric(target) {\n        var targetMetricName = target.metric;\n        var tag = target.tags;\n        var rows = [];\n        var panelMeta = {\n          title: targetMetricName,\n          type: 'graph',\n          linewidth: 2,\n          fill: 0,\n          height: \"300px\",\n          lines: true,\n          targets: [\n            {\n              aggregator: \"avg\",\n              metric: targetMetricName,\n              downsampleAggregator: \"avg\",\n              downsampleInterval: \"15m\",\n              tags: tag\n            },\n            {\n              aggregator: \"avg\",\n              metric: targetMetricName+\".prediction\",\n              downsampleAggregator: \"avg\",\n              downsampleInterval: \"15m\",\n              tags: tag\n            }/*,\n            {\n              aggregator: \"avg\",\n              metric: targetMetricName+\".prediction.min\",\n              downsampleAggregator: \"avg\",\n              downsampleInterval: \"15m\",\n              tags: tag\n            },\n            {\n              aggregator: \"avg\",\n              metric: targetMetricName+\".prediction.max\",\n              downsampleAggregator: \"avg\",\n              downsampleInterval: \"15m\",\n              tags: tag\n            }*/\n          ],\n          seriesOverrides: [\n            {\n              alias: targetMetricName + \".prediction{host=\" + tag.host + \"}\",\n              color: \"#F9D9F9\",\n              zindex: \"-1\"\n            }/*,\n            {\n              alias: targetMetricName + \".prediction.min{host=\" + tag.host + \"}\",\n              color: \"#FDFCFF\",\n              linewidth:\"0\",\n              fill:\"10\",\n              zindex: \"-1\"\n            },\n            {\n              alias: targetMetricName + \".prediction.max{host=\" + tag.host + \"}\",\n              color: \"#008000\",\n              zindex: \"-2\",\n              fill:\"2\",\n              linewidth: \"0\",\n            }*/\n          ],\n          legend: {\n            alignAsTable: true,\n            avg: true,\n            min: true,\n            max: true,\n            current: true,\n            total: true,\n            show: true,\n            values: true\n          },\n          'x-axis': true,\n          'y-axis': true\n        };\n        rows.push(panelMeta);\n\n        _.each([\".trend\", \".seasonal\", \".noise\"], function (defString, index) {\n          var panelMeta = {\n            title: '',\n            type: 'graph',\n            fill: 1,\n            span: 12,\n            linewidth: 2,\n            height: \"300px\",\n            lines: true,\n            targets: [\n              {\n                aggregator: \"avg\",\n                metric: \"\",\n                downsampleAggregator: \"avg\",\n                downsampleInterval: \"15m\",\n                tags: {host: \"\"}\n              }\n            ],\n            seriesOverrides: [],\n            legend: {\n              alignAsTable: true,\n              avg: true,\n              min: true,\n              max: true,\n              current: true,\n              total: true,\n              show: true,\n              values: true\n            },\n            'x-axis': true,\n            'y-axis': true\n          };\n          panelMeta.id = index + 2;\n          panelMeta.title = targetMetricName + defString;\n          panelMeta.targets[0].metric = targetMetricName + defString;\n          panelMeta.targets[0].tags = tag;\n          rows.push(panelMeta);\n        });\n        return rows;\n      }\n\n      $scope.init();\n    });\n  });\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./public/app/features/decompose/DecomposeMetricCtrl.js\n// module id = 1217\n// module chunks = 0","define([\n  'angular',\n],\nfunction (angular) {\n  'use strict';\n\n  angular\n    .module('grafana.directives')\n    .directive('panelInfoEditor', function() {\n      return {\n        scope: {\n          panel: \"=\"\n        },\n        restrict: 'E',\n        controller: 'PanelInfoEditorCtrl',\n        templateUrl: 'app/features/panelinfo/partials/panelInfoEdit.html',\n        link: function() {\n        }\n      };\n    }).controller('PanelInfoEditorCtrl', function($scope,timeSrv) {\n      $scope.init = function () {\n        $scope.panel.helpInfo = $scope.panel.helpInfo || {info: false, title:'',context:''};\n      };\n      $scope.editInfo = function () {\n        $scope.init();\n        $scope.panel.helpInfo.info = !$scope.panel.helpInfo.info;\n        timeSrv.refreshDashboard();\n      };\n      $scope.removeInfo = function () {\n        $scope.panel.helpInfo = null;\n        timeSrv.refreshDashboard();\n      };\n      $scope.init();\n    });\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./public/app/features/panelinfo/panelInfoEditCtrl.js\n// module id = 1218\n// module chunks = 0","import angular from 'angular';\nimport _ from 'lodash';\nimport $ from 'jquery';\nimport {coreModule, appEvents} from  'app/core/core';\nimport config from 'app/core/config';\nimport store from 'app/core/store';\n\ndeclare var window: any;\nconst HEALTH_TYPE = {\n  GREEN: { TEXT: 'green', COLOR: '#66C2A5' },\n  YELLOW: { TEXT: 'yellow', COLOR: '#FDAE61' },\n  RED: { TEXT: 'red', COLOR: '#D53E4F' },\n  GREY: { TEXT: 'grey', COLOR: '#DBE1EA' },\n  BLUE: { TEXT: 'blue', COLOR: '#6FCDFB' }\n};\n\nexport class SystemOverviewCtrl {\n  toolkit: any;\n  renderer: any;\n  _dashboard: any;\n  hostsResource: any;\n  topologyGraphParams: any;\n\n  healthPanel: any = {};\n  alertPanel: any = {};\n  exceptionPanel: any = {};\n  anomalyPanel: any = {};\n  servicePanel: any = {};\n  hostPanel: any = {};\n  predictionPanel: any = {};\n  hostKpi: any = {};\n  serviceKpi: any = {};\n  hostPanels: any;\n  switchEnabled: boolean;\n  topology: any;\n\n  tableParams: any;\n  dependencies: any;\n\n  kpiPanel: any;\n\n  /** @ngInject */\n  constructor(\n    private backendSrv, private alertSrv, private contextSrv, private alertMgrSrv, private healthSrv, private serviceDepSrv,\n    private hostSrv, private utilSrv, private $location, private $scope, private $modal, private $q, private $translate,\n    private NgTableParams\n  ) {\n    $scope.ctrl = this;\n\n    this.topologyGraphParams = {\n      blockSize: 36,\n      spacing: 2,\n      maxChildCount: 10,\n      showTooltip: true,\n      showKeys: true,\n      thresholds: [HEALTH_TYPE.GREEN.TEXT, HEALTH_TYPE.YELLOW.TEXT, HEALTH_TYPE.RED.TEXT, HEALTH_TYPE.GREY.TEXT],\n      colors: [HEALTH_TYPE.GREEN.COLOR, HEALTH_TYPE.YELLOW.COLOR, HEALTH_TYPE.RED.COLOR, HEALTH_TYPE.GREY.COLOR],\n      onClick: {\n        child: this.hostNodeClickHandler.bind(this)\n      }\n    };\n\n    this.tableParams = new this.NgTableParams({\n      count: 5,\n      sorting: { 'anomalyHealth': 'asc' }\n    }, {\n      counts: []\n    });\n\n    this.switchEnabled = store.getBool('grafana.overview.mode');\n    this.toolkit = window.jsPlumbToolkit.newInstance();\n\n    $scope.$on(\"$destroy\", () => {\n      this.setOverviewMode();\n      this.toolkit.clear();\n    });\n\n    // default data\n    this.kpiPanel = {\n      leftTableHeads: ['i18n_hostname', 'i18n_hostname'],\n      leftTableBodys: [\n        { id: '', name: '', data: $translate.i18n.i18n_normal, status: 'green' },\n        { id: '', name: '', data: $translate.i18n.i18n_normal, status: 'green' },\n        { id: '', name: '', data: $translate.i18n.i18n_normal, status: 'green' }\n      ],\n      rightPanelHead: { id: '', name: '...' },\n      rightItemTypes: {\n        ServiceKPI: { id: 'ServiceKPI', name: 'page_overview_kpi_service', data: '...', status: 'green', metrics: {} },\n        ServiceState: { id: 'ServiceState', name: 'page_service_process', data: '...', status: 'green', metrics: {} },\n        HostNW: { id: 'HostNW', name: 'page_host_network', data: '...', status: 'green', metrics: {} },\n        HostCpu: { id: 'HostCpu', name: 'page_overview_cpu_usage', data: '...', status: 'green', metrics: {} },\n        HostMem: { id: 'HostMem', name: 'page_overview_mem_usage', data: '...', status: 'green', metrics: {} },\n        HostIO: { id: 'HostIO', name: 'page_overview_disk_usage', data: '...', status: 'green', metrics: {} },\n      },\n      rightMetrics: [],\n      leftSelected: '',\n      rightSelected: '',\n      type: '',\n    }\n  }\n\n  setOverviewMode() {\n    store.set('grafana.overview.mode', this.switchEnabled);\n  }\n\n  // copy from anomalyMetic.js\n  // 有改动\n  setPanelMetaHost(panelDef, metric, hostname) {\n    var alias = metric + \".anomaly{host=\" + hostname + \"}\";\n    var panel = panelDef;\n    panel.title = metric + \"{host=\" + hostname + \"}\" + this.$translate.i18n.i18n_anomaly_metric;\n    panel.targets[0].metric = metric;\n    panel.targets[0].tags.host = hostname;\n    panel.targets[1].metric = metric + \".anomaly\";\n    panel.targets[1].tags.host = hostname;\n    panel.targets[2].metric = metric + \".prediction.min\";\n    panel.targets[2].tags.host = hostname;\n    panel.targets[3].metric = metric + \".prediction.max\";\n    panel.targets[3].tags.host = hostname;\n\n    panel.seriesOverrides[0].alias = alias;\n    panel.seriesOverrides[1].alias = metric + \".prediction.min{host=\" + hostname + \"}\";\n    panel.seriesOverrides[1].fill  = 0;\n    panel.seriesOverrides[1].linewidth  = 0;\n    panel.seriesOverrides[2].alias = metric + \".prediction.max{host=\" + hostname + \"}\";\n    panel.seriesOverrides[2].fillBelowTo = metric + \".prediction.min{host=\" + hostname + \"}\";\n    panel.seriesOverrides[2].linewidth  = 0;\n    panel.seriesOverrides[2].fill = 0;\n    return panelDef;\n  }\n\n  init() {\n    if (+this.contextSrv.user.systemId === 0 && this.contextSrv.user.orgId) {\n      this.$location.url(\"/systems\");\n      this.contextSrv.sidmenu = false;\n      return;\n    }\n\n    this.backendSrv.get('/api/static/template/overview').then(response => {\n      this._dashboard = response;\n      this.getAlertStatus();\n      this.getAnomaly();\n      this.getSystemAnomaly();\n      this.getHostSummary();\n      this.getServices();\n    }).then(() => {\n      this.$scope.initDashboard({\n        meta     : { canStar: false, canShare: false, canEdit: false, canSave: false },\n        dashboard: this._dashboard\n      }, this.$scope);\n    });\n  }\n\n  // 机器资源信息\n  getHostSummary() {\n    this.hostSrv.getHostInfo().then(response => {\n      this.hostPanels = response;\n    }, err => {\n      this.hostPanels = [];\n    });\n  }\n\n  // 报警情况\n  getAlertStatus() {\n    this.alertPanel.status = [\n      { health: HEALTH_TYPE.GREEN.TEXT, text: 'i18n_normal', count: 0 },\n      { health: HEALTH_TYPE.YELLOW.TEXT, text: 'i18n_warning', count: 0 },\n      { health: HEALTH_TYPE.RED.TEXT, text: 'i18n_critical', count: 0 }\n    ];\n\n    this.alertMgrSrv.loadTriggeredAlerts().then(response => {\n      if (response.data.length) {\n        for (var i = 0; i < response.data.length; i++) {\n          response.data[i].status.level === \"CRITICAL\" ? this.alertPanel.status[2].count++ : this.alertPanel.status[1].count++;\n        }\n      } else {\n        this.alertPanel.status[0].text = '';\n        this.alertPanel.status[0].count = this.$translate.i18n.i18n_normal;\n      }\n    });\n  }\n\n  // 系统异常情况 anomaly\n  getSystemAnomaly() {\n    this.exceptionPanel.status = [\n      { health: HEALTH_TYPE.GREEN.TEXT, text: 'CPU: ', count: 0, threadhold: '80%', message: '' },\n      { health: HEALTH_TYPE.GREEN.TEXT, text: 'Memory: ', count: 0, threadhold: '80%', message: '' }\n    ];\n\n    this.backendSrv.alertD({\n      method: \"get\",\n      url: \"/summary/topn?\" + \"threshold=80\"\n    }).then(response => {\n      ['cpu', 'mem'].forEach((key, i) => {\n        if (response.data[key].count) {\n          this.exceptionPanel.status[i].health = HEALTH_TYPE.RED.TEXT;\n          this.exceptionPanel.status[i].count = response.data[key].count;\n          this.exceptionPanel.status[i].message = response.data[key].topList;\n        }\n      });\n    });\n  }\n\n  // 智能检测异常指标 & 健康指数\n  getAnomaly() {\n    this.anomalyPanel.status = [\n      { health: HEALTH_TYPE.RED.TEXT, text: 'i18n_critical', count: -1 },\n      { health: HEALTH_TYPE.YELLOW.TEXT, text: 'page_overview_panel_anomaly_metric', count: 0 },\n      { health: HEALTH_TYPE.GREEN.TEXT, text: 'page_overview_panel_metric_number', count: 0 }\n    ];\n\n    this.healthSrv.load().then(data => {\n      var healthScore = Math.floor(data.health);\n      this.healthPanel.score = healthScore;\n      this.healthPanel.level = this.$translate.i18n[_.getLeveal(healthScore)];\n\n      var colors = healthScore > 75 ? [HEALTH_TYPE.GREEN.COLOR] : (healthScore > 50 ? [HEALTH_TYPE.YELLOW.COLOR] : [HEALTH_TYPE.RED.COLOR]);\n      this.utilSrv.setPie('.health-pie', [\n        { label: \"\", data: healthScore },\n        { label: \"\", data: 100 - healthScore }\n      ], colors.concat(['#F3F7FA']));\n\n      if (data.numAnomalyMetrics) {\n        this.anomalyPanel.status[1].count = data.numAnomalyMetrics;\n      } else {\n        this.anomalyPanel.status[1].health = HEALTH_TYPE.GREEN.TEXT;\n        this.anomalyPanel.status[1].count = 0;\n      }\n      this.anomalyPanel.status[2].count = data.numMetrics;\n    });\n  }\n\n  // 服务状态\n  getServices() {\n    this.hostsResource = {};\n    var promiseList = [];\n\n    this.serviceDepSrv.readServiceDependency().then(response => {\n      if (!_.isEmpty(response.data)) {\n        this.dependencies = angular.fromJson(_.last(response.data).attributes[0].value);\n\n        _.each(this.dependencies.nodes, node => {\n          var q = this.getServiceStatus(node.id, node.name)\n          .then(resp => {\n            node.status = resp.data.healthStatusType.toLowerCase();\n\n            return resp;\n          })\n          .then(resp => {\n            this.hostsResource[node.name] = {};\n\n            _.forIn(resp.data.hostStatusMap, (item, key) => {\n              !this.hostsResource[node.name][key] && (this.hostsResource[node.name][key] = {\n                \"host\"  : item.hostName,\n                \"status\": item.healthStatusType,\n                \"statusText\": this.$translate.i18n[_.statusFormatter(item.healthStatusType)]\n              });\n            });\n          });\n\n          promiseList.push(q);\n        });\n\n        this.$q.all(promiseList).finally(() => {\n          this.toolkit.load({ type: \"json\", data: _.cloneDeep(this.dependencies) }).render(this.renderFactory());\n        });\n\n      } else {\n        this.alertSrv.set(this.$translate.i18n.i18n_sorry, this.$translate.i18n.page_overview_err_dependency, \"error\", 2000);\n      }\n    });\n  }\n\n  getServiceStatus(serviceId, serviceName) {\n    return this.serviceDepSrv.readServiceStatus(serviceId, serviceName);\n  }\n\n  serviceNodeClickHandler(node) {\n    var serviceId = node.node.data.id;\n    var serviceName = node.node.data.name;\n    var serviceStatus = node.node.data.status;\n    var hosts = [];\n\n    this.topology = this.hostSrv.topology;\n    this.servicePanel.currentService = {\n      id: serviceId,\n      name: serviceName,\n      status: serviceStatus,\n      icon: node.node.data.icon || \"\"\n    };\n\n    this.kpiPanel.type = 'service';\n    this.kpiPanel.leftTableHeads = ['i18n_hostname', 'i18n_status'];\n    this.kpiPanel.leftTableBodys = [];\n\n    this.getServiceKpi(serviceId, serviceName).then(resp => {\n      hosts = Object.keys(resp.hostStatusMap);\n\n      _.each(resp.hostStatusMap, (hostMap, hostKey) => {\n        this.kpiPanel.leftTableBodys.push({\n          id: _.find(this.hostPanels, { host: hostKey }).id,\n          name: hostKey,\n          data: this.$translate.i18n[_.statusFormatter(hostMap.healthStatusType)],\n          status: hostMap.healthStatusType\n        });\n      });\n\n      this.leftClickHandler({ name: hosts[0] }, 'service');\n      return resp;\n    }).then(resp => {\n      // refresh service-dependency-graph, service status\n      _.find(this.dependencies.nodes, { name: serviceName }).status = resp.healthStatusType.toLowerCase();\n      this.toolkit.clear();\n      this.toolkit.load({ type: \"json\", data: _.cloneDeep(this.dependencies) });\n\n      $(node.el).addClass(\"active\").siblings().removeClass(\"active\");\n    });\n  }\n\n  hostNodeClickHandler(node) {\n    var promiseList = [];\n\n    this.hostPanel.currentHost = {\n      id: node._private_.id,\n      name: node.name,\n      status: node.value\n    };\n\n    this.kpiPanel.type = 'host';\n    this.kpiPanel.leftTableHeads = ['i18n_servicename', 'i18n_status'];\n    this.kpiPanel.leftTableBodys = [];\n\n    this.getServicesOnHost(node._private_.id).then((response) => {\n      // 机器上可能没有服务\n      if (_.isEmpty(response.data.services)) {\n        this.leftClickHandler('', 'host');\n      }\n\n      _.each(response.data.services, service => {\n        var q = this.getServiceStatus(service.id, service.name)\n        .then(resp => {\n          service.healthStatusType = resp.data.healthStatusType;\n          return resp.data;\n        });\n        promiseList.push(q);\n      });\n\n      this.$q.all(promiseList).finally(resp => {\n        _.each(response.data.services, service => {\n          this.kpiPanel.leftTableBodys.push({\n            id: service.id,\n            name: service.name,\n            data: this.$translate.i18n[_.statusFormatter(service.healthStatusType)],\n            status: service.healthStatusType,\n            icon: (_.find(this.dependencies.nodes, { id: \"\" + service.id, name: service.name }) || {}).icon\n          });\n        });\n        this.leftClickHandler(response.data.services[0], 'host');\n      });\n    });\n    this.getHostKpi(node.name);\n  }\n\n  leftClickHandler(item, type) {\n    var promise;\n    this.kpiPanel.leftSelected = item.name;\n\n    if (type === 'service') {\n      promise = this.getHostKpi(item.name);\n      this.hostPanel.currentHost = {\n        id: item.id || this.kpiPanel.rightPanelHead.id,\n        name: item.name,\n        status: item.status\n      };\n    }\n    if (type === 'host') {\n      if (_.isEmpty(item)) {\n        promise = this.$q.when([]).then(() => {\n          this.serviceKpi = {};\n        });\n      } else {\n        promise = this.getServiceKpi(item.id, item.name);\n      }\n      this.servicePanel.currentService = {\n        id: item.id,\n        name: item.name,\n        status: item.status,\n        icon: item.icon\n      };\n    }\n    promise.then(() => {\n      this.setServiceKpiPanel(this.kpiPanel.rightPanelHead.name);\n      this.kpiPanel.rightMetrics = [];\n      this.selectKpi('ServiceKPI');\n    });\n  }\n\n  getServicesOnHost(hostId) {\n    return this.backendSrv.alertD({\n      url: `/cmdb/host?id=${hostId}`\n    });\n  }\n\n  getServiceKpi(serviceId, serviceName) {\n    // 拿 servicekpi metric 的 message, 储存在 _.metricHelpMessage 中\n    var service = serviceName.split(\".\")[0];\n    this.backendSrv.readMetricHelpMessage(service);\n\n    return this.serviceDepSrv.readMetricStatus(serviceId, serviceName).then(response => {\n      this.serviceKpi = response.data;\n\n      return response.data;\n    });\n  }\n\n  setServiceKpiPanel(hostname) {\n    // serviceKpi 为空 或者 ServiceKPI 为空\n    ['ServiceKPI', 'ServiceState'].forEach(itemKey => {\n      var itemMap = this.serviceKpi.hostStatusMap && this.serviceKpi.hostStatusMap[hostname].itemStatusMap[itemKey];\n      _.extend(this.kpiPanel.rightItemTypes[itemKey], {\n        id: itemKey,\n        data: itemMap ? this.$translate.i18n[_.statusFormatter(itemMap.healthStatusType)] : this.$translate.i18n.i18n_empty_tmp,\n        status: itemMap ? itemMap.healthStatusType : 'GREY',\n        metrics: itemMap ? itemMap.metricStatusMap : null\n      });\n    });\n\n    // hard code: set servicekpi grey, when service state is grey\n    if (this.kpiPanel.rightItemTypes['ServiceState'].status === 'GREY') {\n      _.extend(this.kpiPanel.rightItemTypes['ServiceKPI'], {\n        data: this.$translate.i18n[_.statusFormatter('GREY')],\n        status: 'GREY',\n        metrics: null\n      });\n    }\n  }\n\n  getHostKpi(hostname) {\n    // 拿 host kpi metric 的 message, 储存在 _.metricHelpMessage 中\n    ['mem', 'io', 'nw', 'cpu'].forEach(item => {\n      this.backendSrv.readMetricHelpMessage(item);\n    });\n\n    this.kpiPanel.rightPanelHead = {\n      id: _.findWhere(this.hostPanels, { host: hostname }).id,\n      name: hostname\n    };\n\n    return this.hostSrv.getHostKpi({ hostname: hostname }).then(response => {\n      this.hostKpi = response.data;\n\n      _.each(response.data.itemStatusMap, (itemMap, itemKey) => {\n        var tmp = itemKey.replace('Host', '').replace('Service', '').toLowerCase();\n        tmp = (tmp === 'io') ? 'disk' : tmp;\n        _.extend(this.kpiPanel.rightItemTypes[itemKey], {\n          id: itemKey,\n          // name: itemKey,\n          data: _.findWhere(this.hostPanels, { host: hostname })[tmp] || this.$translate.i18n[_.statusFormatter(itemMap.healthStatusType)],\n          status: itemMap.healthStatusType,\n          metrics: itemMap.metricStatusMap\n        });\n      });\n\n      return response.data;\n    });\n  }\n\n  selectKpi(kpiItem) {\n    this.kpiPanel.rightSelected = kpiItem;\n\n    var metricsMap = this.kpiPanel.rightItemTypes[kpiItem].metrics;\n    this.kpiPanel.rightMetrics = this.handleKpiMetrics(metricsMap, this.kpiPanel.rightPanelHead.name);\n    this.tableParams.settings({\n      dataset: this.kpiPanel.rightMetrics\n    });\n  }\n\n  handleKpiMetrics(metrics, host) {\n    var metricsTable = [];\n    _.each(metrics, (value, key) => {\n      var health = parseInt(value.health);\n      var alertStatus = 'GREEN';\n      if (value.alertRuleSet) {\n        switch (value.alertLevel) {\n          case 'NORMAL': alertStatus = 'GREEN'; break;\n          case 'WARNING': alertStatus = 'YELLOW'; break;\n          case 'CRITICAL': alertStatus = 'RED'; break;\n        }\n      } else {\n        alertStatus = 'GREY';\n      }\n      metricsTable.push({\n        name: key,\n        host: host,\n        alertRuleSet: value.alertRuleSet ? this.$translate.i18n.i18n_exist : this.$translate.i18n.i18n_empty,\n        alertLevel: this.$translate.i18n[_.translateAlertLevel(value.alertLevel)],\n        anomalyHealth: health,\n        snoozeState: value.snoozeState,\n        triggerRed: health === 0,\n        triggerYellow: health > 0 && health < 26 && !value.snoozeState,\n        metricHelp: _.metricHelpMessage[key] ? _.metricHelpMessage[key].definition : key,\n        alertStatus: alertStatus\n      });\n    });\n    return metricsTable;\n  }\n\n  // 弹窗 查看历史情况\n  showModal(index, metric, host) {\n    this.$scope.row = this._dashboard.rows[index];\n    this.$scope.panel = this._dashboard.rows[index].panels[0];\n\n    if (index === 7) {\n      this.setPanelMetaHost(this.$scope.panel, metric, host);\n      this.healthSrv.transformPanelMetricType(this.$scope.panel);\n    }\n\n    var healthModal = this.$modal({\n      scope: this.$scope,\n      templateUrl: 'public/app/features/systemoverview/partials/system_overview_modal.html',\n      show: false\n    });\n\n    healthModal.$promise.then(healthModal.show);\n  }\n\n  renderFactory() {\n    var canvasElement = document.querySelector(`.jtk-canvas`);\n\n    return {\n      container: canvasElement,\n      view: {\n        nodes: {\n          \"default\": {\n            template: \"tmplNode\",\n            events: {\n              click: this.serviceNodeClickHandler.bind(this)\n            }\n          }\n        }\n      },\n      layout: {\n        type: \"Absolute\"\n      },\n      lassoFilter: \".controls, .controls *, .miniview, .miniview *\",\n      dragOptions: {\n        filter: \".delete *, .add *\"\n      },\n      events: {\n        canvasClick: (e) => {\n          this.toolkit.clearSelection();\n        }\n      },\n      jsPlumb: {\n        Anchor: \"Continuous\",\n        Connector: [ \"StateMachine\", { cssClass: \"connectorClass\", hoverClass: \"connectorHoverClass\" } ],\n        Endpoint: \"Blank\",\n        PaintStyle: { strokeWidth: 1, stroke: HEALTH_TYPE.BLUE.COLOR },\n        Overlays: [\n          [\"Arrow\", { fill: HEALTH_TYPE.BLUE.COLOR, width: 10, length: 10, location: 1 }]\n        ]\n      },\n      consumeRightClick: false,\n      enablePanButtons: false,\n      enableWheelZoom: false\n    };\n  }\n\n  switch() {\n    this.servicePanel.currentService = {};\n    this.hostPanel.currentHost = {};\n    this.switchEnabled = !this.switchEnabled;\n  }\n\n};\n\ncoreModule.controller('SystemOverviewCtrl', SystemOverviewCtrl);\n\n\n\n// WEBPACK FOOTER //\n// node_modules/tslint-loader??ref--0!./public/app/features/systemoverview/systemoverviewCtrl.ts","\nimport coreModule from 'app/core/core_module';\nimport config from 'app/core/config';\nimport _ from 'lodash';\n\nclass StyleGuideCtrl {\n  colors: any = [];\n  theme: string;\n  buttonNames = ['primary', 'secondary', 'inverse', 'success', 'warning', 'danger'];\n  buttonSizes = ['btn-small', '', 'btn-large'];\n  buttonVariants = ['-', '-outline-'];\n  page: any;\n  pages = ['colors', 'buttons', 'forms', 'dashboard', 'query-editors', 'cloudwiz'];\n  cloudwiz: any;\n\n  /** @ngInject **/\n  constructor(private $http, $routeParams) {\n    this.theme = config.bootData.user.userTheme;\n    this.page = {};\n\n    if ($routeParams.page) {\n      this.page[$routeParams.page] = 1;\n    } else {\n      this.page.colors = true;\n    }\n\n    if (this.page.colors) {\n      this.loadColors();\n    }\n\n    this.cloudwiz = {\n      thresholdsColor: ['#66C2A5', '#FEE08B', '#FDAE61', '#FE9805', '#D53E4F', '#DBE1EA', '#6FCDFB'],\n      thresholdsHoverColor: ['#3DB779', '#FFD500', '#FE9805', '#ff4f45', '#BB1144', '#BABFC7', '#18BEEA']\n    }\n  }\n\n  loadColors() {\n   this.$http.get('public/sass/styleguide.json').then(res => {\n      this.colors = _.map(res.data[this.theme], (value, key) => {\n        return {name: key, value: value};\n      });\n    });\n  }\n\n  switchTheme() {\n    var other = this.theme === 'dark' ? 'light' : 'dark';\n    window.location.href = window.location.href + '?theme=' + this.theme;\n  }\n\n}\n\ncoreModule.controller('StyleGuideCtrl', StyleGuideCtrl);\n\n\n\n// WEBPACK FOOTER //\n// node_modules/tslint-loader??ref--0!./public/app/features/styleguide/styleguide.ts","import './rootCauseAnalysisCtrl';\n\n\n\n// WEBPACK FOOTER //\n// node_modules/tslint-loader??ref--0!./public/app/features/rca/all.ts","import angular from 'angular';\nimport _ from 'lodash';\nimport $ from 'jquery';\nimport {coreModule, appEvents} from  'app/core/core';\n\ndeclare var window: any;\n\nexport class RootCauseAnalysisCtrl {\n  toolkit: any;\n  renderer: any;\n  target: any;  // path traversal.\n  mainElement: any;\n  graph: any;\n  traceList: Array<string> = [];\n\n  /** @ngInject */\n  constructor(\n    private backendSrv, private popoverSrv, private alertSrv,\n    private $location, private $scope, private $rootScope, private $timeout\n  ) {\n    this.toolkit = window.jsPlumbToolkit.newInstance();\n    this.renderer = this.renderFactory();\n\n    this.loadGraph().then(response => {\n      if (_.isEmpty(response.edges)) {\n        this.alertSrv.set(\"暂无故障溯源关系图，即将前往关联性分析\", '', \"warning\", 2000);\n        this.$timeout(() => {\n          this.$location.url(`/association${window.location.search}`);\n        }, 2000);\n        return;\n      }\n\n      this.graph = response;\n      this.toolkit.load({ type: \"json\", data: response });\n      this.resetConnection(response);\n    });\n    this.bindEvent();\n\n    $scope.$on(\"$destroy\", () => {\n      this.toolkit.clear();\n    });\n\n    this.$rootScope.onAppEvent('exception-located', this.showGuideResult.bind(this), $scope);\n  }\n\n  loadGraph() {\n    return this.backendSrv.alertD({\n      \"url\": \"/rca/graph\"\n    }).then(response => {\n      var data = { \"nodes\" : [], \"edges\" : [], \"ports\" : [], \"groups\": [] };\n      var sigValList = [];\n      var idList = [];\n      var rate = 1;\n\n      response.data.edges.forEach(item => {\n        // nodes\n        item.src.name = _.getMetricName(item.src.name), item.dest.name = _.getMetricName(item.dest.name);\n        item.src.id = item.src.name, item.dest.id = item.dest.name;\n        item.src.healthType = item.src.healthType.toLowerCase(), item.dest.healthType = item.dest.healthType.toLowerCase();\n        sigValList.push(item.src.sigVal), sigValList.push(item.dest.sigVal);\n      });\n\n      rate = 60 / Math.max(...sigValList);  // node's max-width: 60px\n      response.data.edges.forEach(item => {\n        // nodes\n        item.src.sigVal *= rate, item.dest.sigVal *= rate;\n        idList.indexOf(item.src.id) === -1 && idList.push(item.src.id) && data.nodes.push(item.src);\n        idList.indexOf(item.dest.id) === -1 && idList.push(item.dest.id) && data.nodes.push(item.dest);\n        // edges\n        // cause --> issue\n        data.edges.push({\n          \"source\": item.dest.id,\n          \"target\": item.src.id,\n          \"data\"  : {\n            \"type\": null,\n            \"score\" : item.score * 4,\n            \"solution\": item.solutions\n          },\n        });\n      });\n\n      return data;\n    });\n  }\n\n  renderFactory() {\n    var mainElement = document.querySelector(\"#jtk-paths\"),\n        canvasElement = mainElement.querySelector(`.jtk-canvas`),\n        miniviewElement = mainElement.querySelector(\".miniview\");\n\n    return this.toolkit.render({\n      container: canvasElement,\n      view: {\n        edges: {\n          \"default\": {\n            paintStyle: { lineWidth: 2, stroke: '#C7C5C1' },\n            overlays: [\n              [ \"Arrow\", { fill: \"#C7C5C1\", width: 8, length: 8, location: 1 } ]\n            ]\n          }\n        },\n        nodes: {\n          \"default\": {\n            template: \"tmplNode\",\n            events: {\n              tap: this.nodeTapHandler.bind(this),\n              click: this.nodeClickHandler.bind(this),\n            }\n          }\n        }\n      },\n      layout: {\n        type: \"Spring\",\n        padding: [ 30, 30 ]\n      },\n      miniview: {\n        container: miniviewElement\n      },\n      lassoFilter: \".controls, .controls *, .miniview, .miniview *\",\n      dragOptions: {\n        filter: \".delete *, .add *\"\n      },\n      events: {\n        canvasClick: (e) => {\n          this.toolkit.clearSelection();\n          this.resetGraph();\n        },\n        modeChanged: (mode) => {\n          window.jsPlumb.removeClass(window.jsPlumb.getSelector(\"[mode]\"), \"selected-mode\");\n          window.jsPlumb.addClass(window.jsPlumb.getSelector(\"[mode='\" + mode + \"']\"), \"selected-mode\");\n        }\n      },\n      jsPlumb: {\n        Anchor: \"Continuous\",\n        Connector: [ \"StateMachine\", { cssClass: \"connectorClass\", hoverClass: \"connectorHoverClass\" } ],\n        Endpoint: \"Blank\",\n        HoverPaintStyle: { stroke: \"orange\" },\n      }\n    });\n  }\n\n  resetGraph() {\n    this.traceList = [];\n    window.jsPlumb.removeClass(window.jsPlumb.getSelector(\".jtk-node\"), \"unselected\");\n    window.jsPlumb.removeClass(window.jsPlumb.getSelector(\".jtk-node\"), \"jtk-animate-source\");\n    window.jsPlumb.removeClass(window.jsPlumb.getSelector(\".jtk-connector\"), \"unselected\");\n  }\n\n  resetConnection(response) {\n    response.edges.forEach(item => {\n      window.jsPlumbToolkit.connect({\n        source: $(`[data-jtk-node-id=\"${item.source}\"]`).attr('id'),\n        target: $(`[data-jtk-node-id=\"${item.target}\"]`).attr('id'),\n        paintStyle: { strokeWidth: item.data.score }\n      });\n    });\n  }\n\n  bindEvent() {\n    window.jsPlumb.on(\".controls\", \"tap\", \"[mode]\", (...args) => {\n      var element = args[0].target || args[0].srcElement;\n      this.renderer.setMode(element.getAttribute(\"mode\"));\n    });\n\n    window.jsPlumb.on(\".controls\", \"tap\", \"[reset]\", () => {\n      this.toolkit.clearSelection();\n      this.renderer.zoomToFit();\n    });\n  }\n\n  nodeClickHandler(params) {\n    this.target = params;\n    this.traceList.push(params.el.id);  // eg. jsPlumb_2_8\n    window.jsPlumb.addClass(this.target.el, \"jtk-animate-source\");\n\n    this.toolkit.getNode(this.target).node.getTargetEdges().forEach(edge => {\n      var selectedEdges = this.renderer.selectEdges({\n        element: this.target.el\n      });\n      selectedEdges.each(conn => {\n        window.jsPlumb.removeClass(conn.source, 'unselected');\n        this.traceList.indexOf(conn.targetId) > -1 && window.jsPlumb.removeClass(conn.connector.canvas, 'unselected');\n      });\n      var selector = `[data-jtk-node-id=\"${edge.source.id}\"]`;\n      $(selector).click();\n    });\n  }\n\n  nodeTapHandler(params) {\n    this.resetGraph();\n    this.renderer.selectAllEdges({\n      element: params.el\n    }).addClass('unselected');\n    $('.jtk-node').not(params.el).addClass('unselected');\n\n    // search\n    var searchParams = _.extend({}, this.$location.search(), {\n      metric: params.el.getAttribute(\"data-jtk-node-id\")\n    });\n    this.$location.search(searchParams);\n\n    // show node details\n    this.$scope.detail = {\n      name: params.node.data.name,\n      type: params.node.data.type,\n      description: this.nodeDescriptionHandler(params.node.data.desc)\n    };\n\n    // get directly relevant edges\n    this.$scope.relevantNodes = [];\n    params.node.getTargetEdges().forEach(edge => {\n      edge.source.data.description = this.nodeDescriptionHandler(edge.source.data.desc);\n      this.$scope.relevantNodes.push({ data: edge.source.data, edge: edge.data });\n    });\n\n    this.$scope.$digest();\n  }\n\n  nodeDescriptionHandler(desc) {\n    var description = [];\n\n    if (!_.isEmpty(desc)) {\n      _.each(desc, (item) => {\n        try {\n          description.push(JSON.parse(item));\n        } catch (e) {\n          description.push(item);\n        }\n      });\n    } else {\n      description = [];\n    }\n\n    return description;\n  }\n\n  showGuideResult(e, params) {\n    this.$timeout(() => {\n      var selectors = $(`[data-jtk-node-id=\"${params.metric}\"]`);\n      var node = this.toolkit.getNode(params.metric);\n\n      if (selectors.length && node) {\n        this.nodeTapHandler({\n          el: selectors[0],\n          node: node\n        });\n        selectors[0].click();\n      }\n    }, 100);\n  }\n\n  showNodeDetail(node) {\n  }\n};\n\ncoreModule.controller('RootCauseAnalysisCtrl', RootCauseAnalysisCtrl);\n\n\n\n// WEBPACK FOOTER //\n// node_modules/tslint-loader??ref--0!./public/app/features/rca/rootCauseAnalysisCtrl.ts","import './topnCtrl';\n\n\n\n// WEBPACK FOOTER //\n// node_modules/tslint-loader??ref--0!./public/app/features/topn/all.ts","import angular from 'angular';\nimport _ from 'lodash';\nimport $ from 'jquery';\nimport { coreModule } from  'app/core/core';\nimport moment from 'moment';\nimport kbn from 'app/core/utils/kbn';\n\ndeclare var window: any;\n\nexport class TopNCtrl {\n  dashboard: any;\n  tableParams: any;\n  hostList: Array<any>;\n  host: any;\n  tableData: any;\n  pidList: any;\n  targetObj: any;\n  range: any;\n  selection: any;\n  timePoint: any;\n\n  currentPid: any;\n  selected: any;\n\n  /** @ngInject */\n  constructor(\n    private backendSrv,\n    private hostSrv,\n    private $location,\n    private $scope,\n    private $rootScope,\n    private templateValuesSrv,\n    private dynamicDashboardSrv,\n    private $popover,\n    private $timeout,\n    private timeSrv\n  ) {\n    this.targetObj = _.extend({}, {\n      metric: \"\",\n      host: \"\",\n      start: \"\",\n      pid: \"\"\n    }, this.$location.search());\n\n    $scope.$on('time-window-selected', this.render.bind(this), $scope);\n    $scope.$on('time-window-resize', this.init.bind(this), $scope);\n\n    // manual trigger\n    $timeout(() => {\n      if (!this.targetObj.host) { $('.guide-close-btn').click(); }\n    }, 100);\n  }\n\n  init(event, payload) {\n    this.range = payload;\n    this.getProcess({\n      from: payload.from.valueOf(),\n      to  : payload.to.valueOf()\n    });\n  }\n\n  render(event, payload) {\n    // this.selection = payload;\n    this.range = payload;\n    this.getProcess({\n      from: payload.from.valueOf(),\n      to  : payload.to.valueOf()\n    });\n  }\n\n  getProcess(timeRange) {\n    this.tableData = [];\n    this.selected = -1;\n\n    // To Fix\n    if (timeRange.from) {\n      this.timePoint = timeRange.from + (timeRange.to - timeRange.from) / 2;\n    }\n\n    var host = this.$location.search().host;\n    if (!host) { return; }\n\n    var params = _.extend({\n      hostname: host\n    }, timeRange);\n    this.hostSrv.getProcess(params).then(response => {\n      this.tableData = _.orderBy(response.data, ['cpuPercent'], ['desc']);\n      this.pidList = _.map(this.tableData, 'pid');\n    }).then(this.getDashboard.bind(this));\n  }\n\n  getDashboard() {\n    if (!this.dashboard) {\n      this.backendSrv.get('/api/static/topn').then(response => {\n        // handle dashboard\n        this.addDashboardTemplating(response);\n\n        // store & init dashboard\n        this.dashboard = response;\n        this.dashboard.time = this.range;\n        this.$scope.initDashboard({\n          dashboard: this.dashboard,\n          meta: { canStar: false, canShare: false, canEdit: false, canSave: false },\n        }, this.$scope);\n\n        this.variableUpdated(this.targetObj);\n      });\n    } else {\n      this.dashboard.time = this.range;\n      this.variableUpdated(this.targetObj);\n    }\n  }\n\n  addDashboardTemplating(dashboard) {\n    // pid\n    this.pidList.forEach(pid => {\n      dashboard.templating.list[0].options.push({\n        \"text\": pid,\n        \"value\": pid,\n        \"selected\": false\n      });\n    });\n    dashboard.templating.list[0].query = this.pidList.join(',');\n    // host\n    this.hostList = _.map(this.hostSrv.hostInfo, 'host');\n    this.hostList.forEach(host => {\n      dashboard.templating.list[1].options.push({\n        \"text\": host,\n        \"value\": host,\n        \"selected\": false\n      });\n    });\n    dashboard.templating.list[1].query = this.hostList.join(',');\n  }\n\n  variableUpdated(obj) {\n    obj.host && (this.dashboard.templating.list[1].current = { \"text\": obj.host || \"All\", \"value\": obj.host || \"$__all\", \"tags\": [] });\n\n    this.templateValuesSrv.init(this.dashboard);\n    this.templateValuesSrv.variableUpdated(this.dashboard.templating.list[1]).then(() => {\n      this.dynamicDashboardSrv.update(this.dashboard);\n      this.$rootScope.$emit('template-variable-value-updated');\n      // this.timeSrv.setTime(this.range);\n    });\n  }\n\n  rowClick(pid, index) {\n    this.currentPid = pid;\n    if (this.selected !== index) {\n      this.selected = index;\n      this.dashboard.templating.list[0].current = { \"text\": pid.toString(), \"value\": pid.toString(), \"tags\": [] };\n\n      this.templateValuesSrv.init(this.dashboard);\n      this.templateValuesSrv.variableUpdated(this.dashboard.templating.list[0]).then(() => {\n        this.dynamicDashboardSrv.update(this.dashboard);\n        this.$rootScope.$emit('template-variable-value-updated');\n        // this.timeSrv.setTime(this.range);\n      });\n    } else {\n      this.selected = -1;\n    }\n  }\n\n};\n\ncoreModule.controller('TopNCtrl', TopNCtrl);\n\n\n\n// WEBPACK FOOTER //\n// node_modules/tslint-loader??ref--0!./public/app/features/topn/topnCtrl.ts"],"mappings":";;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;;;;;;;;;ACfA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAAA;;AAEA;AAEA;;;;;;;;AClDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;;;;;;;;ACRA;AACA;AACA;AACA;AACA;AACA,owDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AC1JA;AACA;AACA;AACA,oCACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;;;;;;;;;;AC7CA;AAAA;AAAA;AAAA;AAEA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;AC3BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAEA;AAEA;AAUA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;ACtHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAEA;AAEA;AAuCA;AAOA;AACA;AAAA;AACA;AAEA;AAEA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AC7GA;AACA;AACA;AACA;AACA,oCACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;;;;;;;;ACvDA;AACA;AACA;AACA;AACA,orHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AACA;AAEA;AAEA;AAGA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AATA;AAUA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;;AAEA;;;;;;;;;;;;;;;AC/IA;AACA;AACA;AACA;AACA;AACA,oovKA;AACA;AACA;AACA;AACA,olVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;;;;;;;;ACnBA;AACA;AACA;AACA,ooplOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AAKA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;AC9CA;AACA;AACA,oCACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;;;;;;;;;ACtDA;AACA;AACA;AACA;AACA,ooCACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;;;;;;;;;AChGA;AACA;AACA;AACA,oopfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;;;;;;;;;ACrGA;AACA;AACA;AACA;AACA,oCACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;;;;;;;;;AC7LA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;;;;;;;;;ACpJA;AACA;AACA;AACA,omyJA;AAAA;AA/JA;AAiKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAEA;AACA;;;;;;;;;ACxMA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;;;;;;;AClDA;AACA;AACA;AACA;AACA,oCACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;;;;;;;;;AChGA;AACA;AACA;AACA,opLA;AACA;AACA;AACA,oCACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;;;;;;;;;AChFA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;;;;;;;;;ACNA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAEA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;;AAEA;;;;;;;;;AC3CA;AAAA;AAAA;AAAA;AAAA;AAMA;AAEA;AAMA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;AClFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAEA;AAOA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AAEA;AAEA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAAA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAEA;;;;;;;;;;;;;;;AClEA;AACA;AACA;AACA;AACA,oCACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;;;;;;;;;;ACvCA;AAAA;AAAA;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAEA;AAIA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;;AAEA;;;;;;;;ACzCA;AACA;AACA;AACA,osrJA;AACA;AACA,oCACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;;;;;;;;;AClCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAyBA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAgjBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AAUA;AACA;AAAA;AAVA;AAEA;AACA;AACA;AAEA;AAKA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAAA;AAEA;;;;;;;;;ACnDA;AAAA;AAAA;;;;;;;;;ACCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAIA;AAQA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AALA;AAOA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AAEA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;;AAAA;AAEA;;;;;;;;;AC/PA;AAAA;AAAA;;;;;;;;;ACCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAMA;AAesourceRoot":""}